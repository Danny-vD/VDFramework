<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VDUnityFramework</name>
    </assembly>
    <members>
        <member name="T:VDFramework.BetterMonoBehaviour">
             <summary>
            <para>An 'improved' <see cref="T:UnityEngine.MonoBehaviour"/> which caches often used properties</para>
            <para>A standard call to 'transform' and 'gameobject' makes a call to the C++ side of Unity (where it is cached)</para>
            <para>this call has some overhead which can be removed by caching these on the C# side</para>
             </summary>
        </member>
        <member name="P:VDFramework.BetterMonoBehaviour.CachedTransform">
            <summary>
            The transform of this object
            </summary>
        </member>
        <member name="P:VDFramework.BetterMonoBehaviour.CachedGameObject">
            <summary>
            The gameobject where this component is attached to
            </summary>
        </member>
        <member name="P:VDFramework.BetterMonoBehaviour.transform">
            <summary>
            Overridden to return the CachedTransform
            </summary>
        </member>
        <member name="P:VDFramework.BetterMonoBehaviour.gameObject">
            <summary>
            Overridden to return the CachedGameObject
            </summary>
        </member>
        <member name="T:VDFramework.SafeEnableBehaviour">
            <summary>
            <para>A variation of an <see cref="T:VDFramework.BetterMonoBehaviour"/> that does <b>not</b> invoke <see cref="M:VDFramework.SafeEnableBehaviour.OnEnabled"/> before <see cref="M:VDFramework.SafeEnableBehaviour.Start"/></para>
            <para>Set <see cref="F:VDFramework.SafeEnableBehaviour.invokeOnEnabledAfterStart"/> to false if you do not want to immediately invoke <see cref="M:VDFramework.SafeEnableBehaviour.OnEnabled"/></para>
            </summary>
            <order>Awake() → Start() → OnEnabled()</order>
        </member>
        <member name="F:VDFramework.SafeEnableBehaviour.invokeOnEnabledAfterStart">
            <summary>
            If true, <see cref="M:VDFramework.SafeEnableBehaviour.OnEnabled"/> will be invoked immediately after <see cref="M:VDFramework.SafeEnableBehaviour.Start"/> (instead of waiting until the object is enabled again)
            </summary>
        </member>
        <member name="M:VDFramework.SafeEnableBehaviour.OnEnabled">
            <summary>
            This function is called when the object becomes enabled and active, but never before <see cref="M:VDFramework.SafeEnableBehaviour.Start"/>
            </summary>
        </member>
        <member name="M:VDFramework.SafeEnableBehaviour.Start">
            <summary>
            Unity's start function
            </summary>
        </member>
        <member name="T:VDFramework.MonoBehaviours.TimerManagerUpdater">
            <summary>
            <para>A simple utility behaviour for Unity that updates the TimerManager in Update using Time.deltaTime</para>
            <para>(makes the object DontDestroyOnLoad)</para>
            </summary>
        </member>
        <member name="T:VDFramework.Singleton.Singleton`1">
            <summary>
            A abstract generic implementation of the singleton pattern
            </summary>
            <typeparam name="TSingleton">The type to create a singleton of</typeparam>
        </member>
        <member name="M:VDFramework.Singleton.Singleton`1.DestroyInstance">
            <summary>
            Sets the instance of the singleton to null.
            </summary>
        </member>
        <member name="T:VDFramework.UnityExtensions.BehaviourExtensions">
            <summary>
            Contains extension methods for <see cref="T:UnityEngine.Behaviour"/>
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.BehaviourExtensions.Enable(UnityEngine.Behaviour)">
            <summary>
            Disable this behaviour
            </summary>
            <seealso cref="P:UnityEngine.Behaviour.enabled"/>
        </member>
        <member name="M:VDFramework.UnityExtensions.BehaviourExtensions.Disable(UnityEngine.Behaviour)">
            <summary>
            Enable this behaviour
            </summary>
            <seealso cref="P:UnityEngine.Behaviour.enabled"/>
        </member>
        <member name="T:VDFramework.UnityExtensions.ColliderExtensions">
            <summary>
            Contains extension methods for <see cref="T:UnityEngine.Collider"/>
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.ColliderExtensions.Enable(UnityEngine.Collider)">
            <summary>
            Disable this collider
            </summary>
            <seealso cref="P:UnityEngine.Collider.enabled"/>
        </member>
        <member name="M:VDFramework.UnityExtensions.ColliderExtensions.Disable(UnityEngine.Collider)">
            <summary>
            Enable this collider
            </summary>
            <seealso cref="P:UnityEngine.Collider.enabled"/>
        </member>
        <member name="T:VDFramework.UnityExtensions.ColorExtensions">
            <summary>
            Contains extension methods for <see cref="T:UnityEngine.Color"/>
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.ColorExtensions.DistanceSquared(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Returns the raw distance between 2 colours
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.ColorExtensions.DistanceSquaredHSV(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Returns the raw distance between the HSV of the colours
            </summary>
        </member>
        <member name="T:VDFramework.UnityExtensions.ComponentExtensions">
            <summary>
            Contains extension methods for <see cref="T:UnityEngine.Component"/>
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.ComponentExtensions.ToGameObject``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Transforms a collections of components to a collection of their <see cref="T:UnityEngine.GameObject"/>s
            </summary>
        </member>
        <member name="T:VDFramework.UnityExtensions.CoroutineExtensions">
            <summary>
            Contains several extension methods that add extra functions to coroutines
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.Then(System.Collections.IEnumerator,System.Collections.IEnumerator)">
            <summary>
                Execute another coroutine immediately after this one is done
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.Wait(System.Collections.IEnumerator,System.Single)">
            <summary>
                Wait for a set amount of seconds immediately after this coroutine
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.WaitRealTime(System.Collections.IEnumerator,System.Single)">
            <summary>
                Wait for a set amount of real-time seconds immediately after this coroutine
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.Repeat(System.Collections.IEnumerator,System.Int32)">
            <summary>
                Repeats the given Coroutine.
            </summary>
            <param name="enumerator">The Coroutine that is being repeated.</param>
            <param name="count">The Amount of repetitions. -1 to repeat indefinetly</param>
            <returns>Repeating Coroutine</returns>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.If(System.Collections.IEnumerator,System.Func{System.Boolean})">
            <summary>
            Executes the coroutine if the condition is true
            </summary>
            <param name="enumerator">The coroutine to be executed</param>
            <param name="condition">The condition that has to be met for the execution</param>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.Else(VDFramework.UnityExtensions.ConditionalEnumerator,System.Collections.IEnumerator)">
            <summary>
            Executes the coroutine if the <see cref="M:VDFramework.UnityExtensions.CoroutineExtensions.If(System.Collections.IEnumerator,System.Func{System.Boolean})"/> is false
            </summary>
            <param name="enumerator">The <see cref="T:VDFramework.UnityExtensions.ConditionalEnumerator"/> whose condition to check</param>
            <param name="elseCoroutine">The coroutine to be executed</param>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.While(System.Collections.IEnumerator,System.Func{System.Boolean})">
            <summary>
            Executes the coroutine while the condition is true
            </summary>
            <param name="enumerator">The coroutine to be executed</param>
            <param name="condition">The condition that has to be met for the execution</param>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.Then(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
                Execute another coroutine immediately after this one is done
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.Wait(System.Collections.IEnumerable,System.Single)">
            <summary>
                Wait for a set amount of seconds immediately after this coroutine
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.WaitRealTime(System.Collections.IEnumerable,System.Single)">
            <summary>
                Wait for a set amount of real-time seconds immediately after this coroutine
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.Repeat(System.Collections.IEnumerable,System.Int32)">
            <summary>
                Repeats the given Coroutine.
            </summary>
            <param name="enumerable">The Coroutine that is being repeated.</param>
            <param name="count">The Amount of repetitions. -1 to repeat indefinetly</param>
            <returns>Repeating Coroutine</returns>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.If(System.Collections.IEnumerable,System.Func{System.Boolean})">
            <summary>
            Executes the coroutine if the condition is true
            </summary>
            <param name="enumerable">The coroutine to be executed</param>
            <param name="condition">The condition that has to be met for the execution</param>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.Else(VDFramework.UnityExtensions.ConditionalEnumerable,System.Collections.IEnumerable)">
            <summary>
            Executes the coroutine if the <see cref="M:VDFramework.UnityExtensions.CoroutineExtensions.If(System.Collections.IEnumerable,System.Func{System.Boolean})"/> is false
            </summary>
            <param name="enumerable">The <see cref="T:VDFramework.UnityExtensions.ConditionalEnumerator"/> whose condition to check</param>
            <param name="elseCoroutine">The coroutine to be executed</param>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.While(System.Collections.IEnumerable,System.Func{System.Boolean})">
            <summary>
            Executes the coroutine while the condition is true
            </summary>
            <param name="enumerable">The coroutine to be executed</param>
            <param name="condition">The condition that has to be met for the execution</param>
        </member>
        <member name="T:VDFramework.UnityExtensions.ConditionalEnumerator">
            <summary>
            An abstract base class that has properties specificially aimed at conditional execution
            </summary>
        </member>
        <member name="F:VDFramework.UnityExtensions.ConditionalEnumerator.enumerator">
            <summary>
            The enumerator to execute depending on the <see cref="F:VDFramework.UnityExtensions.ConditionalEnumerator.executionCondition"/>
            </summary>
        </member>
        <member name="F:VDFramework.UnityExtensions.ConditionalEnumerator.executionCondition">
            <summary>
            The condition for the execution
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.ConditionalEnumerator.#ctor(System.Collections.IEnumerator,System.Func{System.Boolean})">
            <summary>
            An abstract base class that has properties specificially aimed at conditional execution
            </summary>
            <param name="enumerator">The enumerator to execute depending on the <see cref="F:VDFramework.UnityExtensions.ConditionalEnumerator.executionCondition"/></param>
            <param name="condition">The condition for the execution</param>
        </member>
        <member name="P:VDFramework.UnityExtensions.ConditionalEnumerator.ExecutedOnce">
            <summary>
            Will be true if the enumerator has ran at least once
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.ConditionalEnumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.UnityExtensions.ConditionalEnumerator.Reset">
            <inheritdoc />
        </member>
        <member name="P:VDFramework.UnityExtensions.ConditionalEnumerator.Current">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.UnityExtensions.ConditionalEnumerator.SetExecutedOnce">
            <summary>
            Flag this enumerator as 'has ran at least once'
            </summary>
            <seealso cref="P:VDFramework.UnityExtensions.ConditionalEnumerator.ExecutedOnce"/>
        </member>
        <member name="T:VDFramework.UnityExtensions.IfEnumerator">
            <summary>
            An Enumerator that executes the enumerator if the condition is true
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.IfEnumerator.#ctor(System.Collections.IEnumerator,System.Func{System.Boolean})">
            <summary>
            An Enumerator that executes the enumerator if the condition is true
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.UnityExtensions.IfEnumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.UnityExtensions.WhileEnumerator">
            <summary>
            An Enumerator that executes as long as the condition is true
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.WhileEnumerator.#ctor(System.Collections.IEnumerator,System.Func{System.Boolean})">
            <summary>
            An Enumerator that executes as long as the condition is true
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.UnityExtensions.WhileEnumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.UnityExtensions.ConditionalEnumerable">
            <summary>
            An abstract base class that has properties specificially aimed at conditional execution
            </summary>
        </member>
        <member name="F:VDFramework.UnityExtensions.ConditionalEnumerable.enumerable">
            <summary>
            The enumerable to execute depending on the <see cref="F:VDFramework.UnityExtensions.ConditionalEnumerable.executionCondition"/>
            </summary>
        </member>
        <member name="F:VDFramework.UnityExtensions.ConditionalEnumerable.executionCondition">
            <summary>
            The condition for the execution
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.ConditionalEnumerable.#ctor(System.Collections.IEnumerable,System.Func{System.Boolean})">
            <summary>
            An abstract base class that has properties specificially aimed at conditional execution
            </summary>
            <param name="enumerable">The enumerable to execute depending on the <see cref="F:VDFramework.UnityExtensions.ConditionalEnumerable.executionCondition"/></param>
            <param name="condition">The condition for the execution</param>
        </member>
        <member name="M:VDFramework.UnityExtensions.ConditionalEnumerable.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.UnityExtensions.ConditionalEnumerable.InnerGetEnumerator">
            <summary>
             Returns the Enumerator of the underlaying Enumerable
            </summary>
             <inheritdoc cref="M:VDFramework.UnityExtensions.ConditionalEnumerable.GetEnumerator"/>
        </member>
        <member name="T:VDFramework.UnityExtensions.IfEnumerable">
            <summary>
            An Enumerable that executes the enumerator if the condition is true
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.IfEnumerable.#ctor(System.Collections.IEnumerable,System.Func{System.Boolean})">
            <summary>
            An Enumerable that executes the enumerator if the condition is true
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.UnityExtensions.IfEnumerable.InnerGetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.UnityExtensions.WhileEnumerable">
            <summary>
            An Enumerable that executes as long as the condition is true
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.WhileEnumerable.#ctor(System.Collections.IEnumerable,System.Func{System.Boolean})">
            <summary>
            An Enumerable that executes as long as the condition is true
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.UnityExtensions.WhileEnumerable.InnerGetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.UnityExtensions.GameObjectExtensions">
            <summary>
            Contains extension methods for <see cref="T:UnityEngine.GameObject"/>
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.GameObjectExtensions.DestroyOnLoad(UnityEngine.GameObject)">
            <summary>
            Mark this object to be destroyed on load (the reverse of DontDestroyOnLoad)
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.GameObjectExtensions.EnsureComponent``1(UnityEngine.GameObject)">
            <summary>
            Ensures that the specified <see cref="T:UnityEngine.Component"/> is on this <see cref="T:UnityEngine.GameObject"/> by creating it if it does not exists
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.GameObjectExtensions.EnsureComponent``1(UnityEngine.Component)">
            <summary>
            Ensures that the specified <see cref="T:UnityEngine.Component"/> is on this <see cref="T:UnityEngine.GameObject"/> by creating it if it does not exists
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.GameObjectExtensions.TryGetComponentInChildren``1(UnityEngine.GameObject,``0@,System.Boolean)">
            <summary>
            Attempts to get the specified <see cref="T:UnityEngine.Component"/> in one of the children and returns whether one was found
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.GameObjectExtensions.TryGetComponentInChildren``1(UnityEngine.Component,``0@,System.Boolean)">
            <summary>
            Attempts to get the specified <see cref="T:UnityEngine.Component"/> in one of the children and returns whether one was found
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.GameObjectExtensions.TryGetComponentInParent``1(UnityEngine.GameObject,``0@,System.Boolean)">
            <summary>
            Attempts to get the specified <see cref="T:UnityEngine.Component"/> in one of the parents and returns whether one was found
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.GameObjectExtensions.TryGetComponentInParent``1(UnityEngine.Component,``0@,System.Boolean)">
            <summary>
            Attempts to get the specified <see cref="T:UnityEngine.Component"/> in one of the parents and returns whether one was found
            </summary>
        </member>
        <member name="T:VDFramework.UnityExtensions.TransformExtensions">
            <summary>
            Contains extension methods for <see cref="T:UnityEngine.Transform"/>
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.TransformExtensions.DestroyChildren(UnityEngine.Transform)">
            <summary>
            Destroys all children
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.TransformExtensions.DestroyChildrenImmediate(UnityEngine.Transform)">
            <summary>
            Destroys all children immediately
            </summary>
        </member>
        <member name="T:VDFramework.UnityExtensions.VectorExtensions">
            <summary>
            Contains Extension methods for Vectors
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.VectorExtensions.Abs(UnityEngine.Vector2)">
            <summary>
            Return the absolute value of this vector
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.VectorExtensions.Abs(UnityEngine.Vector2Int)">
            <summary>
            Return the absolute value of this vector
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.VectorExtensions.Abs(UnityEngine.Vector3)">
            <summary>
            Return the absolute value of this vector
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.VectorExtensions.Abs(UnityEngine.Vector3Int)">
            <summary>
            Return the absolute value of this vector
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.VectorExtensions.Abs(UnityEngine.Vector4)">
            <summary>
            Return the absolute value of this vector
            </summary>
        </member>
        <member name="T:VDFramework.Utility.QuaternionMathUtil">
            <summary>
            Contains helper functions for <see cref="T:UnityEngine.Quaternion"/> math
            </summary>
        </member>
        <member name="M:VDFramework.Utility.QuaternionMathUtil.IsApproximate(UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single)">
            <summary>
            Checks if two quaternions are approximately the same
            </summary>
            <param name="lhs">The first quaternion to compare</param>
            <param name="rhs">The second quaternion to compare</param>
            <param name="precision">
            <para>An acceptable range for quaternions to still be counted as equal</para>
            <para>0.1 degree difference is a difference of 0.0000004f</para>
            </param>
            <credit>https://discussions.unity.com/t/how-do-i-compare-quaternions/47274/6</credit>
        </member>
        <member name="M:VDFramework.Utility.EnumDictionaryUtil.PopulateEnumDictionary``3(System.Collections.Generic.List{``0})">
            <summary>
            Will add a KeyValuePair for every enumValue to the list
            </summary>
            <returns>The same list</returns>
        </member>
        <member name="T:VDFramework.Utility.MathUtility.MathUtil">
            <summary>
            Static class that contains useful math functions
            </summary>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.MathUtil.GetSignFactor(System.Single)">
            <summary>
            Returns a number depending on the sign of the input
            </summary>
            <returns>negative: -1 | zero: 0 | positive: 1</returns>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.MathUtil.GetYCoordinateOnCurve(System.Single,System.Single,System.Single)">
            <summary>
            Get the Y coordinate of a 2D curve that crosses y = 0 at [0,0] and [distance,0] with a maxY of height
            </summary>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.MathUtil.GetXCoordinatesOnCurve(System.Single,System.Single,System.Single)">
            <summary>
            Get the X coordinates of a 2D curve that crosses y = 0 at [0,0] and [distance,0] with a maxY of height
            </summary>
        </member>
        <member name="T:VDFramework.Utility.MathUtility.NumberUtil">
            <summary>
            Static class that contains functions for getting data about numbers
            </summary>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.NumberUtil.ToFraction(System.Decimal,System.Int64@,System.Int64@)">
            <summary>
            Breaks down the given number into a numerator and a denominator and converts it to its simplest form
            </summary>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.NumberUtil.ToFraction(System.Double,System.Int64@,System.Int64@,System.Int32)">
            <summary>
            Breaks down the given number into a numerator and a denominator and converts it to its simplest form
            </summary>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.NumberUtil.ToFraction(System.Single,System.Int64@,System.Int64@,System.Int32)">
            <summary>
            Breaks down the given number into a numerator and a denominator and converts it to its simplest form
            </summary>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.NumberUtil.GetLeastCommonMultiple(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Returns the Least Common Multiple of the given floating point numbers
            </summary>
            <theory>
            <para>https://en.wikipedia.org/wiki/Euclidean_algorithm</para>
            <para>https://en.wikipedia.org/wiki/Least_common_multiple</para>
            </theory>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.NumberUtil.GetLeastCommonMultiple(System.Collections.Generic.IEnumerable{System.Single},System.Int32)">
            <summary>
            Returns the Least Common Multiple of the given floating point numbers
            </summary>
            <theory>
            <para>https://en.wikipedia.org/wiki/Euclidean_algorithm</para>
            <para>https://en.wikipedia.org/wiki/Least_common_multiple</para>
            </theory>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.NumberUtil.GetLeastCommonMultiple(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Returns the Least Common Multiple of the given numbers
            </summary>
            <credit>https://stackoverflow.com/questions/147515/least-common-multiple-for-3-or-more-numbers/29717490#29717490</credit>
            <theory>
            <para>https://en.wikipedia.org/wiki/Euclidean_algorithm</para>
            <para>https://en.wikipedia.org/wiki/Least_common_multiple</para>
            </theory>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.NumberUtil.GetLeastCommonMultiple(System.Int64,System.Int64)">
            <summary>
            Returns the Least Common Multiple of the given numbers
            </summary>
            <theory>
            <para>https://en.wikipedia.org/wiki/Euclidean_algorithm</para>
            <para>https://en.wikipedia.org/wiki/Least_common_multiple</para>
            </theory>
        </member>
        <member name="T:VDFramework.Utility.RandomUtil">
            <summary>
            Utility methods to randomly get an item from a given set of objects
            </summary>
        </member>
        <member name="M:VDFramework.Utility.RandomUtil.RandomBool">
            <summary>
            Returns a random bool value
            </summary>
            <returns>TRUE or FALSE</returns>
        </member>
        <member name="M:VDFramework.Utility.RandomUtil.GetRandom(System.Object[])">
            <summary>
            Returns randomly from the parameters given
            </summary>
            <returns>Any of the parameters, randomly selected</returns>
        </member>
        <member name="M:VDFramework.Utility.RandomUtil.GetRandom``1(``0[])">
            <inheritdoc cref="M:VDFramework.Utility.RandomUtil.GetRandom(System.Object[])"/>
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle">
            <summary>
            <para>An abstract representation of a timer which invokes an event after a certain amount of seconds pass (possibly loops)</para>
            <para>This can be used to Pause the timer or change properties</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.OnHandleFinished">
            <summary>
            Used internally by the <see cref="T:VDFramework.Utility.TimerUtil.TimerManager"/> to remove this Handle from the update list when <see cref="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.Stop"/> is invoked
            </summary>
            <seealso cref="F:VDFramework.Utility.TimerUtil.TimerManager.timers"/>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.CurrentTime">
            <summary>
            The amount of seconds remaining until the callback invokes
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.CurrentTimeNormalized">
            <summary>
            A value of [0,1] that represents the % between 0 and the startTime of the timer
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.StartTime">
            <summary>
            The amount of seconds that the timer started with (will be reset to this value when the timer loops)
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.IsLooping">
            <summary>
            Whether or not the timer should reset itself upon expiring
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.IsPaused">
            <summary>
            If a timer is paused the internal timer will not be updated
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.IsTicking">
            <summary>
            <para>Whether or not this handle represents an active timer (i.e. started by the <see cref="T:VDFramework.Utility.TimerUtil.TimerManager"/>)</para>
            <para>This will also return true if a timer is started by the <see cref="T:VDFramework.Utility.TimerUtil.TimerManager"/> but has been paused</para>
            </summary>
            <seealso cref="P:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.IsPaused"/>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.#ctor(System.Double,System.Boolean)">
            <summary>
            A handle to the timer, this can be used to Pause the timer or change some properties
            </summary>
            <param name="startTime">The time in seconds after which the callback will be invoked</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.ResetTimer">
            <summary>
            Reset the internal timer immediately to <see cref="P:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.StartTime"/>
            </summary>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.SetLoop(System.Boolean)">
            <summary>
            Set whether or not the timer should loop after expiring
            </summary>
            <param name="loop">Should the timer loop after expiring?</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.SetStartTime(System.Double,System.Boolean)">
            <summary>
            Set the <see cref="P:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.StartTime"/> of the timer
            <para>This will only have an effect if the timer is reset or loops</para>
            </summary>
            <param name="newStartTime">The new start time for the timer</param>
            <param name="resetTimer">Whether the timer should reset after setting the new start time</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.SetPause(System.Boolean)">
            <summary>
            Pause the timer to temporarily prevent updating the internal timer
            </summary>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.Stop">
            <summary>
            Stop this timer immediately and prevent further updates
            <para>If you mean to temporarily pause a timer, use <see cref="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.SetPause(System.Boolean)"/> instead</para>
            </summary>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.Cleanup">
            <summary>
            Called when the timer is stopped
            </summary>
            <seealso cref="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.Stop"/>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.InvokeCallback">
            <summary>
            <para>Invoke the callback</para>
            <para>Called when the timer expires</para>
            </summary>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.SetCallbackToNull">
            <summary>
            <para>Set the callback to null to remove all references it may hold</para>
            <para>Called when the timer expires for a non-looping handle</para>
            </summary>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.CompareTo(VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle)">
            <summary>
            Compare using the StartTime
            <para>(uses CurrentTime if equal)</para>
            </summary>
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle`1">
            <summary>
            A version of <see cref="T:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle"/> that implements a property for the Callback
            </summary>
            <typeparam name="TDelegate">Any delegate type (e.g. Action)</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle`1.OnTimerExpire">
            <summary>
            The callback to invoke when the timer expires, setting this to null will stop the timer
            </summary>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle`1.SetCallbackToNull">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle`1.#ctor(System.Double,`0,System.Boolean)">
            <inheritdoc />
            <param name="startTime">The time in seconds after which the callback will be invoked</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callback">The callback that will be invoked after the timer expires</param>
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.AbstractParametersTimerHandle`1">
            <summary>
            An abstract TimerHandle that has additional methods specifically aimed at parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.AbstractParametersTimerHandle`1.ParameterCount">
            <summary>
            Get the amount of parameters of the callback that will be invoked when the timer expires
            </summary>
            <returns>The amount of parameters of the callback function</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.AbstractParametersTimerHandle`1.#ctor(System.Double,`0,System.Boolean)">
            <summary>
            An abstract TimerHandle that has additional methods specifically aimed at parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.AbstractParametersTimerHandle`1.#ctor(System.Double,`0,System.Boolean,System.Object[])">
            <summary>
            An abstract TimerHandle that has additional methods specifically aimed at parameters
            </summary>
            <param name="startTime">The time in seconds after which the callback will be invoked</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callback">The callback that will be invoked after the timer expires</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.AbstractParametersTimerHandle`1.GetParameters">
            <summary>
            Get the currently set parameters of this TimerHandle
            </summary>
            <returns>The parameters that will be used to invoke the callback</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.AbstractParametersTimerHandle`1.GetParameter(System.Int32)">
            <summary>
            Return the parameter at the specified index
            </summary>
            <param name="parameterIndex">The index of the parameter (zero-indexed)</param>
            <returns>The boxed parameter</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.AbstractParametersTimerHandle`1.SetParameters(System.Object[])">
            <summary>
            <para>Set parameters that will be used to invoke the callback</para>
            <para>Setting this to more than the <see cref="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.AbstractParametersTimerHandle`1.ParameterCount"/> will not cause an out of bounds exception because any excess will be ignored</para>
            <para>Setting this to less than the <see cref="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.AbstractParametersTimerHandle`1.ParameterCount"/> will only change the parameters up to callbackParameters.Length</para>
            </summary>
            <param name="callbackParameters">The new parameters to be used for invoking the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.AbstractParametersTimerHandle`1.SetParameter(System.Int32,System.Object)">
            <summary>
            Set the respective parameter to the given value
            </summary>
            <param name="parameterIndex">The index of the parameter (zero-indexed)</param>
            <param name="parameterValue">the new value of the parameter</param>
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.DelegateTimerHandle">
            <summary>
            <para>A Handle for a timer that has a callback that has any number of parameters (depends on the given callback)</para>
            <para>While the Delegate supports any amount of parameters it is encouraged to use another option because <see cref="M:System.Delegate.DynamicInvoke(System.Object[])"/> and the boxing-unboxing of parameters is very slow</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.DelegateTimerHandle.parameters">
            <summary>
            All the parameters as an array of objects
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.DelegateTimerHandle.OnTimerExpire">
            <inheritdoc />
            <seealso cref="M:System.Delegate.DynamicInvoke(System.Object[])"/>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.DelegateTimerHandle.ParameterCount">
            <summary>
            Get the amount of parameters that the callback of this TimerHandle can take
            </summary>
            <returns>The amount of parameters of the callback function</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.DelegateTimerHandle.#ctor(System.Double,System.Delegate,System.Boolean,System.Object[])">
            <summary>
            <para>A Handle for a timer that has a callback that has any number of parameters (depends on the given callback)</para>
            <para>While the Delegate supports any amount of parameters it is encouraged to use another option because <see cref="M:System.Delegate.DynamicInvoke(System.Object[])"/> and the boxing-unboxing of parameters is very slow</para>
            </summary>
            <param name="startTime">The time in seconds after which the callback will be invoked</param>
            <param name="callback">The callback that will be invoked after the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.DelegateTimerHandle.GetParameters">
            <inheritdoc />
            <Warning>This array is not a copy, changing the elements changes the actual parameters of the TimerHandle</Warning>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.DelegateTimerHandle.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.DelegateTimerHandle.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.DelegateTimerHandle.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.DelegateTimerHandle.ResizeParameterArray">
            <summary>
            Will setup the parameter object[] to match the parameter count of the current delegate, will reuse any existing parameter array if it exists
            </summary>
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`1">
            <summary>
            A Handle for a timer that has a callback that has 1 parameter
            </summary>
            <typeparam name="TParam1">The type of the parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`1.Param1">
            <summary>
            The parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`1.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`1.#ctor(System.Double,System.Action{`0},System.Boolean,`0)">
            <summary>
            A Handle for a timer that has a callback that has 1 parameter
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`1.#ctor(System.Double,System.Action{`0},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 1 parameter
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`1.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`1.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`1.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`2">
            <summary>
            A Handle for a timer that has a callback that has 2 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`2.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`2.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`2.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`2.#ctor(System.Double,System.Action{`0,`1},System.Boolean,`0,`1)">
            <summary>
            A Handle for a timer that has a callback that has 2 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`2.#ctor(System.Double,System.Action{`0,`1},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 2 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`2.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`2.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`2.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`3">
            <summary>
            A Handle for a timer that has a callback that has 3 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`3.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`3.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`3.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`3.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`3.#ctor(System.Double,System.Action{`0,`1,`2},System.Boolean,`0,`1,`2)">
            <summary>
            A Handle for a timer that has a callback that has 3 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`3.#ctor(System.Double,System.Action{`0,`1,`2},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 3 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`3.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`3.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`3.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`4">
            <summary>
            A Handle for a timer that has a callback that has 4 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`4.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`4.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`4.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`4.Param4">
            <summary>
            The fourth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`4.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`4.#ctor(System.Double,System.Action{`0,`1,`2,`3},System.Boolean,`0,`1,`2,`3)">
            <summary>
            A Handle for a timer that has a callback that has 4 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`4.#ctor(System.Double,System.Action{`0,`1,`2,`3},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 4 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`4.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`4.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`4.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`5">
            <summary>
            A Handle for a timer that has a callback that has 5 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`5.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`5.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`5.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`5.Param4">
            <summary>
            The fourth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`5.Param5">
            <summary>
            The fifth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`5.ParameterCount">
            <summary>
            A Handle for a timer that has a callback that has no parameters
            </summary>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`5.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4},System.Boolean,`0,`1,`2,`3,`4)">
            <summary>
            A Handle for a timer that has a callback that has 5 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`5.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 5 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`5.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`5.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`5.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`6">
            <summary>
            A Handle for a timer that has a callback that has 6 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`6.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`6.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`6.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`6.Param4">
            <summary>
            The fourth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`6.Param5">
            <summary>
            The fifth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`6.Param6">
            <summary>
            The sixth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`6.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`6.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5},System.Boolean,`0,`1,`2,`3,`4,`5)">
            <summary>
            A Handle for a timer that has a callback that has 6 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`6.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 6 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`6.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`6.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`6.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7">
            <summary>
            A Handle for a timer that has a callback that has 7 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7.Param4">
            <summary>
            The fourth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7.Param5">
            <summary>
            The fifth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7.Param6">
            <summary>
            The sixth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7.Param7">
            <summary>
            The seventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6},System.Boolean,`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            A Handle for a timer that has a callback that has 7 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 7 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8">
            <summary>
            A Handle for a timer that has a callback that has 8 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.Param4">
            <summary>
            The fourth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.Param5">
            <summary>
            The fifth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.Param6">
            <summary>
            The sixth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.Param7">
            <summary>
            The seventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.Param8">
            <summary>
            The eighth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7},System.Boolean,`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            A Handle for a timer that has a callback that has 8 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 8 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9">
            <summary>
            A Handle for a timer that has a callback that has 9 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.Param4">
            <summary>
            The fourth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.Param5">
            <summary>
            The fifth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.Param6">
            <summary>
            The sixth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.Param7">
            <summary>
            The seventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.Param8">
            <summary>
            The eighth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.Param9">
            <summary>
            The ninth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8},System.Boolean,`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            A Handle for a timer that has a callback that has 9 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 9 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10">
            <summary>
            A Handle for a timer that has a callback that has 10 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.Param4">
            <summary>
            The fourth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.Param5">
            <summary>
            The fifth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.Param6">
            <summary>
            The sixth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.Param7">
            <summary>
            The seventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.Param8">
            <summary>
            The eighth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.Param9">
            <summary>
            The ninth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.Param10">
            <summary>
            The tenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9},System.Boolean,`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            A Handle for a timer that has a callback that has 10 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <param name="param10">The tenth parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 10 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11">
            <summary>
            A Handle for a timer that has a callback that has 11 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
            <typeparam name="TParam11">The type of the eleventh parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.Param4">
            <summary>
            The fourth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.Param5">
            <summary>
            The fifth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.Param6">
            <summary>
            The sixth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.Param7">
            <summary>
            The seventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.Param8">
            <summary>
            The eighth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.Param9">
            <summary>
            The ninth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.Param10">
            <summary>
            The tenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.Param11">
            <summary>
            The eleventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10},System.Boolean,`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
            <summary>
            A Handle for a timer that has a callback that has 11 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <param name="param10">The tenth parameter that is used to invoke the callback</param>
            <param name="param11">The eleventh parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 11 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12">
            <summary>
            A Handle for a timer that has a callback that has 12 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
            <typeparam name="TParam11">The type of the eleventh parameter</typeparam>
            <typeparam name="TParam12">The type of the twelfth parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.Param4">
            <summary>
            The fourth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.Param5">
            <summary>
            The fifth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.Param6">
            <summary>
            The sixth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.Param7">
            <summary>
            The seventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.Param8">
            <summary>
            The eighth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.Param9">
            <summary>
            The ninth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.Param10">
            <summary>
            The tenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.Param11">
            <summary>
            The eleventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.Param12">
            <summary>
            The twelfth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11},System.Boolean,`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)">
            <summary>
            A Handle for a timer that has a callback that has 12 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <param name="param10">The tenth parameter that is used to invoke the callback</param>
            <param name="param11">The eleventh parameter that is used to invoke the callback</param>
            <param name="param12">The twelfth parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 12 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13">
            <summary>
            A Handle for a timer that has a callback that has 13 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
            <typeparam name="TParam11">The type of the eleventh parameter</typeparam>
            <typeparam name="TParam12">The type of the twelfth parameter</typeparam>
            <typeparam name="TParam13">The type of the thirteenth parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.Param4">
            <summary>
            The fourth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.Param5">
            <summary>
            The fifth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.Param6">
            <summary>
            The sixth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.Param7">
            <summary>
            The seventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.Param8">
            <summary>
            The eighth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.Param9">
            <summary>
            The ninth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.Param10">
            <summary>
            The tenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.Param11">
            <summary>
            The eleventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.Param12">
            <summary>
            The twelfth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.Param13">
            <summary>
            The thirteenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12},System.Boolean,`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)">
            <summary>
            A Handle for a timer that has a callback that has 13 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <param name="param10">The tenth parameter that is used to invoke the callback</param>
            <param name="param11">The eleventh parameter that is used to invoke the callback</param>
            <param name="param12">The twelfth parameter that is used to invoke the callback</param>
            <param name="param13">The thirteenth parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 13 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14">
            <summary>
            A Handle for a timer that has a callback that has 14 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
            <typeparam name="TParam11">The type of the eleventh parameter</typeparam>
            <typeparam name="TParam12">The type of the twelfth parameter</typeparam>
            <typeparam name="TParam13">The type of the thirteenth parameter</typeparam>
            <typeparam name="TParam14">The type of the fourteenth parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param4">
            <summary>
            The fourth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param5">
            <summary>
            The fifth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param6">
            <summary>
            The sixth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param7">
            <summary>
            The seventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param8">
            <summary>
            The eighth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param9">
            <summary>
            The ninth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param10">
            <summary>
            The tenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param11">
            <summary>
            The eleventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param12">
            <summary>
            The twelfth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param13">
            <summary>
            The thirteenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param14">
            <summary>
            The fourteenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13},System.Boolean,`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)">
            <summary>
            A Handle for a timer that has a callback that has 14 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 14 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15">
            <summary>
            A Handle for a timer that has a callback that has 15 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
            <typeparam name="TParam11">The type of the eleventh parameter</typeparam>
            <typeparam name="TParam12">The type of the twelfth parameter</typeparam>
            <typeparam name="TParam13">The type of the thirteenth parameter</typeparam>
            <typeparam name="TParam14">The type of the fourteenth parameter</typeparam>
            <typeparam name="TParam15">The type of the fifteenth parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param4">
            <summary>
            The fourth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param5">
            <summary>
            The fifth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param6">
            <summary>
            The sixth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param7">
            <summary>
            The seventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param8">
            <summary>
            The eighth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param9">
            <summary>
            The ninth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param10">
            <summary>
            The tenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param11">
            <summary>
            The eleventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param12">
            <summary>
            The twelfth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param13">
            <summary>
            The thirteenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param14">
            <summary>
            The fourteenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param15">
            <summary>
            The fifteenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14},System.Boolean,`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)">
            <summary>
            A Handle for a timer that has a callback that has 15 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <param name="param10">The tenth parameter that is used to invoke the callback</param>
            <param name="param11">The eleventh parameter that is used to invoke the callback</param>
            <param name="param12">The twelfth parameter that is used to invoke the callback</param>
            <param name="param13">The thirteenth parameter that is used to invoke the callback</param>
            <param name="param14">The fourteenth parameter that is used to invoke the callback</param>
            <param name="param15">The fifteenth parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 15 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16">
            <summary>
            A Handle for a timer that has a callback that has 16 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
            <typeparam name="TParam11">The type of the eleventh parameter</typeparam>
            <typeparam name="TParam12">The type of the twelfth parameter</typeparam>
            <typeparam name="TParam13">The type of the thirteenth parameter</typeparam>
            <typeparam name="TParam14">The type of the fourteenth parameter</typeparam>
            <typeparam name="TParam15">The type of the fifteenth parameter</typeparam>
            <typeparam name="TParam16">The type of the sixteenth parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param4">
            <summary>
            The fourth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param5">
            <summary>
            The fifth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param6">
            <summary>
            The sixth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param7">
            <summary>
            The seventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param8">
            <summary>
            The eighth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param9">
            <summary>
            The ninth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param10">
            <summary>
            The tenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param11">
            <summary>
            The eleventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param12">
            <summary>
            The twelfth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param13">
            <summary>
            The thirteenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param14">
            <summary>
            The fourteenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param15">
            <summary>
            The fifteenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param16">
            <summary>
            The sixteenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15},System.Boolean,`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15)">
            <summary>
            A Handle for a timer that has a callback that has 16 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <param name="param10">The tenth parameter that is used to invoke the callback</param>
            <param name="param11">The eleventh parameter that is used to invoke the callback</param>
            <param name="param12">The twelfth parameter that is used to invoke the callback</param>
            <param name="param13">The thirteenth parameter that is used to invoke the callback</param>
            <param name="param14">The fourteenth parameter that is used to invoke the callback</param>
            <param name="param15">The fifteenth parameter that is used to invoke the callback</param>
            <param name="param16">The sixteenth parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 16 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.TimerHandle">
            <summary>
            A Handle for a timer that has a callback that has no parameters
            </summary>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.TimerHandle.#ctor(System.Double,System.Action,System.Boolean)">
            <summary>
            A Handle for a timer that has a callback that has no parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.TimerHandle.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerManager">
            <summary>
            <para>Manager class for all timers</para>
            <para>use <see cref="M:VDFramework.Utility.TimerUtil.TimerManager.Update(System.Double)"/> to update all timers</para>
            <para>The timers are updated in reversed order so the last one started will be updated first</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.TimerUtil.TimerManager.timers">
            <summary>
            A collection of <see cref="T:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle"/> whose time will be updated in <see cref="M:VDFramework.Utility.TimerUtil.TimerManager.Update(System.Double)"/>
            </summary>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer(System.Double,System.Action,System.Boolean)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerDelegate(System.Double,System.Delegate,System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
            <seealso cref="M:System.Delegate.DynamicInvoke(System.Object[])"/>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer(VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle)">
            <summary>
            Start a timer on the given TimerHandle and resets the timer (only resets it is already ticking)
            </summary>
            <param name="handle">The TimerHandle to set the timer on</param>
            <returns>The same timerhandle</returns>
            <seealso cref="P:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.IsTicking"/>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``1(VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle,``0)">
            <summary>
            <para>Starts a new timer using the data from the given TimerHandle</para>
            <para>use <see cref="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``1(VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle{``0})"/> if you want to reuse the callback from the given handle</para>
            </summary>
            <param name="handle">A TimerHandle whose data will be used to set a new timer</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``1(VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle{``0})">
            <summary>
            <para>Starts a new timer using the data from the given TimerHandle</para>
            </summary>
            <param name="handle">A TimerHandle whose data will be used to set a new timer</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.AddHandleToUpdateList(VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle)">
            <summary>
            Adds this timerHandle to the list of TimerHandles
            </summary>
            <param name="handle">The TimerHandle that will be added</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.Update(System.Double)">
            <summary>
            Updates the internal timer of each <see cref="T:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle"/> with deltaTime
            </summary>
            <param name="deltaTime">The amount to update the timers with</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``1(System.Double,System.Action{``0},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``1(System.Double,System.Action{``0},System.Boolean,``0)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``2(System.Double,System.Action{``0,``1},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``2(System.Double,System.Action{``0,``1},System.Boolean,``0,``1)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``3(System.Double,System.Action{``0,``1,``2},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``3(System.Double,System.Action{``0,``1,``2},System.Boolean,``0,``1,``2)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``4(System.Double,System.Action{``0,``1,``2,``3},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``4(System.Double,System.Action{``0,``1,``2,``3},System.Boolean,``0,``1,``2,``3)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``5(System.Double,System.Action{``0,``1,``2,``3,``4},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``5(System.Double,System.Action{``0,``1,``2,``3,``4},System.Boolean,``0,``1,``2,``3,``4)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``6(System.Double,System.Action{``0,``1,``2,``3,``4,``5},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``6(System.Double,System.Action{``0,``1,``2,``3,``4,``5},System.Boolean,``0,``1,``2,``3,``4,``5)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``7(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``7(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6},System.Boolean,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``8(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``8(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Boolean,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``9(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``9(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Boolean,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``10(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``10(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Boolean,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <param name="param10">The tenth parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``11(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``11(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Boolean,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <param name="param10">The tenth parameter that is used to invoke the callback</param>
            <param name="param11">The eleventh parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``12(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``12(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Boolean,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <param name="param10">The tenth parameter that is used to invoke the callback</param>
            <param name="param11">The eleventh parameter that is used to invoke the callback</param>
            <param name="param12">The twelfth parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``13(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``13(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Boolean,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <param name="param10">The tenth parameter that is used to invoke the callback</param>
            <param name="param11">The eleventh parameter that is used to invoke the callback</param>
            <param name="param12">The twelfth parameter that is used to invoke the callback</param>
            <param name="param13">The thirteenth parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``14(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``14(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Boolean,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <param name="param10">The tenth parameter that is used to invoke the callback</param>
            <param name="param11">The eleventh parameter that is used to invoke the callback</param>
            <param name="param12">The twelfth parameter that is used to invoke the callback</param>
            <param name="param13">The thirteenth parameter that is used to invoke the callback</param>
            <param name="param14">The fourteenth parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``15(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``15(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Boolean,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <param name="param10">The tenth parameter that is used to invoke the callback</param>
            <param name="param11">The eleventh parameter that is used to invoke the callback</param>
            <param name="param12">The twelfth parameter that is used to invoke the callback</param>
            <param name="param13">The thirteenth parameter that is used to invoke the callback</param>
            <param name="param14">The fourteenth parameter that is used to invoke the callback</param>
            <param name="param15">The fifteenth parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``16(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Boolean,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <param name="param10">The tenth parameter that is used to invoke the callback</param>
            <param name="param11">The eleventh parameter that is used to invoke the callback</param>
            <param name="param12">The twelfth parameter that is used to invoke the callback</param>
            <param name="param13">The thirteenth parameter that is used to invoke the callback</param>
            <param name="param14">The fourteenth parameter that is used to invoke the callback</param>
            <param name="param15">The fifteenth parameter that is used to invoke the callback</param>
            <param name="param16">The sixteenth parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``16(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate(VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle{System.Action})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <returns>A new TimerHandle</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``1(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``2(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``3(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``4(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2,``3})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``5(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2,``3,``4})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``6(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2,``3,``4,``5})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``7(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``8(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``9(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``10(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``11(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
            <typeparam name="TParam11">The type of the eleventh parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``12(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
            <typeparam name="TParam11">The type of the eleventh parameter</typeparam>
            <typeparam name="TParam12">The type of the twelfth parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``13(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
            <typeparam name="TParam11">The type of the eleventh parameter</typeparam>
            <typeparam name="TParam12">The type of the twelfth parameter</typeparam>
            <typeparam name="TParam13">The type of the thirteenth parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``14(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
            <typeparam name="TParam11">The type of the eleventh parameter</typeparam>
            <typeparam name="TParam12">The type of the twelfth parameter</typeparam>
            <typeparam name="TParam13">The type of the thirteenth parameter</typeparam>
            <typeparam name="TParam14">The type of the fourteenth parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``15(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
            <typeparam name="TParam11">The type of the eleventh parameter</typeparam>
            <typeparam name="TParam12">The type of the twelfth parameter</typeparam>
            <typeparam name="TParam13">The type of the thirteenth parameter</typeparam>
            <typeparam name="TParam14">The type of the fourteenth parameter</typeparam>
            <typeparam name="TParam15">The type of the fifteenth parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``16(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
            <typeparam name="TParam11">The type of the eleventh parameter</typeparam>
            <typeparam name="TParam12">The type of the twelfth parameter</typeparam>
            <typeparam name="TParam13">The type of the thirteenth parameter</typeparam>
            <typeparam name="TParam14">The type of the fourteenth parameter</typeparam>
            <typeparam name="TParam15">The type of the fifteenth parameter</typeparam>
            <typeparam name="TParam16">The type of the sixteenth parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="T:VDFramework.Utility.Unsafe.UnsafeUtil">
            <summary>
            Contains utility methods for working with unsafe code
            </summary>
        </member>
        <member name="M:VDFramework.Utility.Unsafe.UnsafeUtil.reinterpret_cast``2(``0)">
            <summary>
            Reinterpret the bits from one type as if it were another
            </summary>
        </member>
        <member name="T:VDFramework.Utility.Windows.EnvironmentVariables">
            <summary>
            An Utility class to easily access some environment variables
            </summary>
        </member>
        <member name="P:VDFramework.Utility.Windows.SpecialFolder.DefaultPath">
            <summary>
            Returns the default path for the folder
            </summary>
        </member>
        <member name="P:VDFramework.Utility.Windows.SpecialFolder.Path">
            <summary>
            Get the current path to the folder
            </summary>
            <exception cref="T:System.IO.DirectoryNotFoundException">Throws if there is no valid path to the folder</exception>
        </member>
        <member name="P:VDFramework.Utility.Windows.SpecialFolder.CSIDL">
            <summary>
            constant special item ID list
            <para>(Only applicable before Windows Vista)</para>
            <para>https://docs.microsoft.com/en-us/windows/win32/shell/csidl</para>
            </summary>
        </member>
        <member name="T:VDFramework.Utility.Windows.SpecialFolders">
            <summary>
            An utility class to easily access information about the special folders
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.AddNewPrograms">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.AppdataDesktop">
            <summary>
            Used internally by .NET applications to enable cross-platform app functionality. It is not intended to be used directly from an application.
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.AppdataDocuments">
            <summary>
            Used internally by .NET applications to enable cross-platform app functionality. It is not intended to be used directly from an application.
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.AppDataFavorites">
            <summary>
            Used internally by .NET applications to enable cross-platform app functionality. It is not intended to be used directly from an application.
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.AppDataProgramData">
            <summary>
            Used internally by .NET applications to enable cross-platform app functionality. It is not intended to be used directly from an application.
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.AppsFolder">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.AppUpdates">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.ChangeRemovePrograms">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.ComputerFolder">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.ConflictFolder">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.ConnectionsFolder">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.ControlPanelFolder">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.Downloads">
            <summary>
            The default folder where downloaded files are stored.
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.Games">
             <summary>
            <para>Deprecated in Windows 10, version 1803 and later versions. In these versions, it returns 0x80070057 - E_INVALIDARG</para>
             <para>VIRTUAL FOLDER: no path available</para>
             </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.HomeGroup">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.HomeGroupCurrentUser">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.InternetFolder">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.Libraries">
            <summary>
            The folder where libraries like 'Videos', 'Images', 'Documents', 'Music' etc. are stored.
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.NetworkFolder">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.PrintersFolder">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.ProgramFilesX64">
            <summary>
            Not supported on 32-bit operating systems. It also is not supported for 32-bit applications running on 64-bit operating systems.
            Attempting to use FOLDERID_ProgramFilesX64 in either situation results in an error.
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.RecycleBinFolder">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.SEARCH_CSC">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.SearchHome">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.SEARCH_MAPI">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.SkyDrive">
            <summary>
            OneDrive
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.SkyDriveCameraRoll">
            <summary>
            OneDrive Camera Roll
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.SkyDriveDocuments">
            <summary>
            OneDrive Documents
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.SkyDrivePictures">
            <summary>
            OneDrive Pictures
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.SyncManagerFolder">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.SyncResultsFolder">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.SyncSetupFolder">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.System">
            <summary>
            System32
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.UsersFiles">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.UsersLibraries">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="T:VDFramework.EventSystem.EventManager">
            <summary>
            The manager class for the global event system, use this class to add and remove listeners from events and to raise an event
            </summary>
            <seealso cref="M:VDFramework.EventSystem.EventManager.AddListener``1(System.Action,System.Int32)"/>
            <seealso cref="M:VDFramework.EventSystem.EventManager.RemoveListener``1(System.Action)"/>
            <seealso cref="M:VDFramework.EventSystem.EventManager.RaiseEvent``1(``0)"/>
        </member>
        <member name="T:VDFramework.EventSystem.VDEvent`1">
            <summary>
            An abstract representation of a global event that provides an easier way to add/remove listeners 
            </summary>
        </member>
        <member name="E:VDFramework.EventSystem.VDEvent`1.Listeners">
            <summary>
            The listeners to this global event that take in an instance of this event as a parameter
            </summary>
        </member>
        <member name="E:VDFramework.EventSystem.VDEvent`1.ParameterlessListeners">
            <summary>
            The listeners to this global event that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.EventSystem.VDEvent`1.AddListener(System.Action{`0},System.Int32)">
            <summary>
            A shortcut to add a listener with a given priority to this event
            </summary>
            <param name="handler">The function that will be invoked when this event is raised</param>
            <param name="priorityOrder">Higher priority will be invoked over lower priority</param>
        </member>
        <member name="M:VDFramework.EventSystem.VDEvent`1.AddListener(System.Action,System.Int32)">
            <summary>
            A shortcut to add a listener with a given priority to this event
            </summary>
            <param name="handler">The function that will be invoked when this event is raised</param>
            <param name="priorityOrder">Higher priority will be invoked over lower priority</param>
        </member>
        <member name="M:VDFramework.EventSystem.VDEvent`1.RemoveListener(System.Action{`0})">
            <summary>
            A shortcut to remove a listener from this event
            </summary>
        </member>
        <member name="M:VDFramework.EventSystem.VDEvent`1.RemoveListener(System.Action)">
            <summary>
            A shortcut to remove a listener from this event
            </summary>
        </member>
        <member name="T:VDFramework.EventSystem.VDEvent">
            <summary>
            An abstract representation of a global event
            </summary>
        </member>
        <member name="P:VDFramework.EventSystem.VDEvent.Consumed">
            <summary>
            If an event is consumed it will invoke no more listeners
            </summary>
        </member>
        <member name="M:VDFramework.EventSystem.VDEvent.Consume">
            <summary>
            Consume this event and prevent any additional listeners from being invoked
            </summary>
        </member>
        <member name="T:VDFramework.Exceptions.SingletonViolationException">
            <summary>
            The exception that is thrown once you create a 2nd instance of a singleton
            </summary>
        </member>
        <member name="T:VDFramework.Extensions.EnumerableExtensions">
            <summary>
            Contains Extension methods for IEnumerables
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.EnumerableExtensions.CountIsZeroOrOne``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            True if this collection is empty or contains only one element
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.EnumerableExtensions.GetMinMax``1(System.Collections.Generic.IEnumerable{``0},``0@,``0@)">
            <summary>
            Calculate the Min and the Max values in the collection using <see cref="T:System.IComparable`1"/>
            </summary>
            <param name="collection">The collection to calculate the Min and Max against</param>
            <param name="minElement">The element in the collection that precedes all other elements in the sort order</param>
            <param name="maxElement">The element in the collection that follows all other elements in the sort order</param>
            <returns>A value indicating whether calculating the Min and Max was successful</returns>
        </member>
        <member name="T:VDFramework.Extensions.EnumExtensions">
            <summary>
            Contains extension methods for <see cref="T:System.Enum"/>
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.EnumExtensions.GetNames``1(``0)">
            <summary>
            Returns an IEnumerable that contains the names of every value of this enum
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.EnumExtensions.GetValues``1(``0)">
            <summary>
            Returns an IEnumerable of <see cref="!:TEnum"/> that has all the values of the enum
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.EnumExtensions.GetRandomValue``1(``0)">
            <summary>
            Returns a random value of this enum
            </summary>
        </member>
        <member name="T:VDFramework.Extensions.FloatingPointExtensions">
            <summary>
            Contains extension methods for floating-point numbers
            </summary>
            <seealso cref="T:System.Single"/>
            <seealso cref="T:System.Double"/>
            <seealso cref="T:System.Decimal"/>
        </member>
        <member name="M:VDFramework.Extensions.FloatingPointExtensions.GetDecimalCount(System.Single)">
            <summary>
            Get the amount of decimals after the decimal seperator
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.FloatingPointExtensions.GetDecimalCount(System.Double)">
            <summary>
            Get the amount of decimals after the decimal seperator
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.FloatingPointExtensions.GetDecimalCount(System.Decimal)">
            <summary>
            Get the amount of decimals after the decimal seperator
            </summary>
        </member>
        <member name="T:VDFramework.Extensions.Int32Extensions">
            <summary>
            Contains extension methods for 32-bit integers (<see cref="T:System.Int32"/>)
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.Int32Extensions.HasAtLeastOneMatchingBit(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Check every bit one by one to see if they are equal
            </summary>
            <returns>TRUE if at least one bit is equal</returns>
        </member>
        <member name="M:VDFramework.Extensions.Int32Extensions.AddFlag(System.Int32@,System.Int32)">
            <summary>
            Add the given bitflag to this value
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.Int32Extensions.RemoveFlag(System.Int32@,System.Int32)">
            <summary>
            Remove the given bitflag from this value
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.Int32Extensions.Ordinalize(System.Int32)">
            <summary>
            <para>Returns the ordinal version of this number</para>
            <para>Only supports 0-16 at the moment, higher than that will return number.ToString</para>
            </summary>
            <param name="number">The number to ordinalise</param>
            <returns>A string that respresents the ordinal version of the given number (e.g. 3 -> "third")</returns>
        </member>
        <member name="T:VDFramework.Extensions.ListExtensions">
            <summary>
            Contains extension methods for <see cref="T:System.Collections.Generic.List`1"/>
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.ListExtensions.ResizeList``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Resize the list so that it holds a <paramref name="newSize"/> amount of <typeparamref name="TItem"/>
            <para></para>(will also resize the underlaying array)
            </summary>
            <param name="list">The list to resize</param>
            <param name="newSize">The elements that are in the list</param>
            <typeparam name="TItem">The type of items in the list</typeparam>
        </member>
        <member name="M:VDFramework.Extensions.ListExtensions.MakeDistinct``1(System.Collections.Generic.List{``0})">
            <summary>
            Removes all duplicate elements from this list by using the default equality comparer to compare values.
            </summary>
            <param name="list">The list whose duplicates will be removed</param>
            <typeparam name="TItem">The type of elements in the list</typeparam>
            <returns>the same list to support chaining methods</returns>
            <seealso cref="M:VDFramework.Extensions.ListExtensions.MakeDistinct``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:VDFramework.Extensions.ListExtensions.MakeDistinct``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Removes all duplicate elements from this list by by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.
            </summary>
            <param name="list">The list whose duplicates will be removed</param>
            <param name="equalityComparer">the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that will be used to compare values</param>
            <typeparam name="TItem">The type of elements in the list</typeparam>
            <returns>the same list to support chaining methods</returns>
        </member>
        <member name="T:VDFramework.Extensions.ObjectExtensions">
            <summary>
            Contains extension methods for System.<see cref="T:System.Object"/>
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.ObjectExtensions.ConvertTo``1(System.Object)">
            <summary>
            <para>Converts this type to the specified type</para>
            <para>WARNING: this method does not support user-defined conversions</para>
            </summary>
            <typeparam name="TNewType">The Type to convert to</typeparam>
            <exception cref="T:System.InvalidCastException">Will be thrown if the conversion is not valid</exception>
        </member>
        <member name="T:VDFramework.Extensions.RandomElement">
            <summary>
            Extension methods for collections that allow getting a random element or randomly sorting the collection 
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.RandomElement.GetRandomElement``1(System.Collections.Generic.IEnumerable{``0},System.Int32@)">
            <summary>
            Returns a random element from this collection
            </summary>
            <param name="collection">The collection to return a random element from</param>
            <param name="randomIndex">the index of the element returned</param>
        </member>
        <member name="M:VDFramework.Extensions.RandomElement.GetRandomElement``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a random element from this collection
            </summary>
            <param name="collection">The collection to return a random element from</param>
        </member>
        <member name="M:VDFramework.Extensions.RandomElement.GetRandomElement``1(System.Collections.Generic.IEnumerable{``0},System.Int32@,System.Int32[])">
            <summary>
            Returns a random element from this collection
            </summary>
            <param name="collection">The collection to return a random element from</param>
            <param name="randomIndex">the index of the element returned</param>
            <param name="ignoreIndices">[OPTIONAL] the indices of elements that cannot be returned by this function</param>
        </member>
        <member name="M:VDFramework.Extensions.RandomElement.GetRandomElement``1(System.Collections.Generic.IEnumerable{``0},System.Int32[])">
            <summary>
            Returns a random element from this collection
            </summary>
            <param name="collection">The collection to return a random element from</param>
            <param name="ignoreIndices">[OPTIONAL] the indices of elements that cannot be returned by this function</param>
        </member>
        <member name="M:VDFramework.Extensions.RandomElement.Randomize``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Randomly sorts the IEnumberable
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.RandomElement.Randomize``1(System.Collections.Generic.List{``0})">
            <summary>
            Randomly sorts the list
            </summary>
        </member>
        <member name="T:VDFramework.Extensions.StringExtensions">
            <summary>
            Contains extension methods for <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.StringExtensions.InsertSpaceBeforeCapitals(System.String)">
            <summary>
            Returns a new string where a space is inserted before each capital, skipping the first char
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.StringExtensions.ReplaceUnderscoreWithSpace(System.String)">
            <summary>
            Replaces all underscores in this string with a space
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.StringExtensions.EnforceLength(System.String,System.Int32,System.Char,System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Returns a string with specified length where certain substrings will only count as 1 char
            </summary>
            <param name="desiredLength">The length that you want the returned string to be</param>
            <param name="addCharToEnd">In case the string is too short, add this character to get the desired length</param>
            <param name="countAs1Char">A collection of substrings that will only count as 1 char for the purposes of returning the desired length</param>
            <param name="string">The string whose length to enforce</param>
        </member>
        <member name="M:VDFramework.Extensions.StringExtensions.GetCharsBetweenAandB(System.String,System.Char,System.Char,System.Int32)">
            <summary>
            Get all characters between two characters including the two characters (will not return correctly if another pair is nested within a pair)
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.StringExtensions.CharCount(System.String,System.Char)">
            <summary>
            Get a count of how many times a specific character appears within the string
            </summary>
        </member>
        <member name="T:VDFramework.IO.Parsers.BinaryParsers.Parsers.BitShiftEndianParser">
            <summary>
            Contains functions to get primitives from or set primitives to a byte*
            </summary>
        </member>
        <member name="T:VDFramework.IO.Parsers.BinaryParsers.Readers.ByteReader">
            <summary>
            Contains functions for parsing and reading bytes
            </summary>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Readers.ByteReader.ReadByte(System.Byte*@)">
            <summary>
            Read a byte from the location of the pointer
            </summary>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Readers.ByteReader.ReadSByte(System.Byte*@)">
            <summary>
            Read a signed byte from the location of the pointer
            </summary>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Readers.ByteReader.ReadBytes(System.Byte*@,System.Byte[]@,System.Int32)">
            <summary>
            Read a specified amount of bytes from the location of the pointer and store them in the given byte[]
            </summary>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Readers.ByteReader.ReadBytes(System.Byte*@,System.Byte[]@,System.UInt64)">
            <summary>
            Read a specified amount of bytes from the location of the pointer and store them in the given byte[]
            </summary>
        </member>
        <member name="T:VDFramework.IO.Parsers.BinaryParsers.Readers.PrimitiveReaders.PrimitiveReaderBigEndian">
            <summary>
            Contains functions for reading bytes in the big endian format (will automatically pick the algorithm depending on the endianness of the system)
            </summary>
        </member>
        <member name="T:VDFramework.IO.Parsers.BinaryParsers.Readers.PrimitiveReaders.PrimitiveReaderLittleEndian">
            <summary>
            Contains functions for reading bytes in the little endian format (will automatically pick the algorithm depending on the endianness of the system)
            </summary>
        </member>
        <member name="T:VDFramework.IO.Parsers.BinaryParsers.Readers.StringReader">
            <summary>
            Contains functions for parsing and reading strings
            </summary>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Readers.StringReader.ReadString(System.Byte*@,System.Int32)">
            <summary>
            Read a NULL-terminated <see cref="P:System.Text.Encoding.UTF8"/> string with maxCount characters from the byte pointer
            </summary>
            <returns>
            A string up to a NULL-character or up to maxCount characters
            </returns>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Readers.StringReader.ReadString(System.Byte*@,System.UInt64)">
            <summary>
            Read a NULL-terminated <see cref="P:System.Text.Encoding.UTF8"/> string with maxCount characters from the byte pointer
            </summary>
            <returns>
            A string up to a NULL-character or up to maxCount characters
            </returns>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Readers.StringReader.ReadString(System.Byte*@)">
            <summary>
            Read a NULL-terminated <see cref="P:System.Text.Encoding.UTF8"/> string with the byte pointer
            </summary>
            <warning>
            There is no predefined limit, it will keep reading until either a NULL-character is found or until it has read Int32.<see cref="F:System.Int32.MaxValue"/> characters
            </warning>
            <returns>
            A string up to a NULL-character
            </returns>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Readers.StringReader.GetString(System.Byte[],System.Int32)">
            <summary>
            Read a NULL-terminated string with maxCount characters from the byte array
            </summary>
            <returns>
            A string up to a NULL-character or up to maxCount characters
            </returns>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Readers.StringReader.GetString(System.Byte[],System.UInt64)">
            <summary>
            Read a NULL-terminated <see cref="P:System.Text.Encoding.UTF8"/> string with maxCount characters from the byte array
            </summary>
            <returns>
            A string up to a NULL-character or up to maxCount characters
            </returns>
        </member>
        <member name="T:VDFramework.IO.Parsers.BinaryParsers.Writers.ByteWriter">
            <summary>
            Contains functions for parsing and writing bytes
            </summary>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Writers.ByteWriter.WriteByte(System.Byte*@,System.Byte)">
            <summary>
            Write a byte to the location of the pointer
            </summary>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Writers.ByteWriter.WriteSByte(System.Byte*@,System.SByte)">
            <summary>
            Write a signed byte to the location of the pointer
            </summary>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Writers.ByteWriter.WriteBytes(System.Byte*@,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write the data given in the array to the location of the pointer, only a specific part of the given array can be used by using the startIndex and length parameters
            </summary>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Writers.ByteWriter.WriteBytes(System.Byte*@,System.Byte[],System.UInt64,System.UInt64)">
            <summary>
            Write the data given in the array to the location of the pointer, only a specific part of the given array can be used by using the startIndex and length parameters
            </summary>
        </member>
        <member name="T:VDFramework.IO.Parsers.BinaryParsers.Writers.PrimitiveWriters.PrimitiveWriterBigEndian">
            <summary>
            Contains functions for writing bytes in the big endian format (will automatically pick the algorithm depending on the endianness of the system)
            </summary>
        </member>
        <member name="T:VDFramework.IO.Parsers.BinaryParsers.Writers.PrimitiveWriters.PrimitiveWriterLittleEndian">
            <summary>
            Contains functions for writing bytes in the little endian format (will automatically pick the algorithm depending on the endianness of the system)
            </summary>
        </member>
        <member name="T:VDFramework.IO.Parsers.BinaryParsers.Writers.StringWriter">
            <summary>
            Contains functions for parsing and writing strings
            </summary>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Writers.StringWriter.WriteString(System.Byte*@,System.String,System.Boolean)">
            <summary>
            <para>Write an <see cref="P:System.Text.Encoding.UTF8"/> string to the byte pointer</para>
            <para>Optionally append a NULL-character at the end of the string</para>
            </summary>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Writers.StringWriter.WriteString(System.Byte*@,System.String,System.Int32)">
            <summary>
            <para>Write an <see cref="P:System.Text.Encoding.UTF8"/> string to the byte pointer</para>
            <para>The string will be modified so that it is size <paramref name="bytesToWrite"/> either by cutting it off, or appending NULL-characters</para>
            </summary>
            <warning>
            This function does not gracefully handle cutting off a multi-byte character, it will split the bytes of these characters if it reached the <paramref name="bytesToWrite"/>
            </warning>
        </member>
        <member name="T:VDFramework.LootTables.Interfaces.ILoot`1">
            <summary>
            Represents an object that returns loot in some way
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.Interfaces.ILoot`1.GetLoot">
            <summary>
            Retrieves or calculates the loot and returns it
            </summary>
        </member>
        <member name="T:VDFramework.LootTables.LootTableItems.LootTableItem`1">
            <summary>
            The simplest implementation of the <see cref="T:VDFramework.LootTables.Interfaces.ILoot`1"/> interface
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.LootTableItems.LootTableItem`1.#ctor(`0)">
            <summary>
            Creates a new instance of this class with the loot set to <paramref name="loot"/>
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.LootTableItems.LootTableItem`1.GetLoot">
            <inheritdoc/>
        </member>
        <member name="M:VDFramework.LootTables.LootTableItems.LootTableItem`1.Equals(VDFramework.LootTables.LootTableItems.LootTableItem{`0})">
            <inheritdoc/>
        </member>
        <member name="M:VDFramework.LootTables.LootTableItems.LootTableItem`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:VDFramework.LootTables.LootTableItems.LootTableItem`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:VDFramework.LootTables.Variations.PercentageLootTable`1.TryGetPair(VDFramework.LootTables.Interfaces.ILoot{`0},VDFramework.LootTables.Structs.PercentageLootTablePair{`0}@)">
            <summary>
            Attempt to get the LootTablePair whose loot matches the given loot
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.Variations.PercentageLootTable`1.EnsureValidPercentages">
            <summary>
            Grab the first N percentages until we reached 100%, or increase the last percentage if the total is below 100%
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.Variations.PercentageLootTable`1.ConvertPercentagesToWeightAndAddToTable(System.Collections.Generic.List{VDFramework.LootTables.Structs.PercentageLootTablePair{`0}})">
            <summary>
            Convert percentages to weight and add them to the lootTable
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.WeightedLootTable`1.GetLoot">
            <summary>
            Grabs a random ILoot from the table based on the weights and returns it
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.WeightedLootTable`1.CalculateIndexArray">
            <summary>
            <para>Calculate an array of indices from the Loot Table</para>
            <para>The amount of duplicate values is dependent on the weight</para>
            </summary>
        </member>
    </members>
</doc>
