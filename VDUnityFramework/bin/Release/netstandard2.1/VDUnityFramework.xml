<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VDUnityFramework</name>
    </assembly>
    <members>
        <member name="T:VDFramework.AssetBundles.AssetBundleUtil">
            <summary>
            Utility class that helps with the loading and unloading of <see cref="T:UnityEngine.AssetBundle"/>s and the assets therein
            </summary>
        </member>
        <member name="M:VDFramework.AssetBundles.AssetBundleUtil.TryLoadAsset``1(System.String,System.String,``0@)">
            <summary>
            <para>Attempts to load the asset with the given name in the given bundle</para>
            <para>It will load the bundle fisrt if it was not already loaded</para>
            </summary>
            <param name="bundleName">The name of the bundle to load the asset from</param>
            <param name="assetPath">The relative path of the asset within the bundle</param>
            <param name="asset">The asset that was loaded</param>
            <typeparam name="TAssetType">The type of the asset to load</typeparam>
            <returns>Whether the asset succesfully loaded</returns>
        </member>
        <member name="M:VDFramework.AssetBundles.AssetBundleUtil.TryLoadAllAssets``1(System.String,``0[]@)">
            <summary>
            <para>Attempts to load all assets of a given type in the given bundle</para>
            <para>It will load the bundle first if it was not already loaded</para>
            </summary>
            <param name="bundleName">The name of the bundle to load the assets from</param>
            <param name="assets">An array of assets that were loaded</param>
            <typeparam name="TAssetType">The type of the assets to load</typeparam>
            <returns>Whether at least 1 asset succesfully loaded</returns>
        </member>
        <member name="M:VDFramework.AssetBundles.AssetBundleUtil.TryLoadAssetBundle(System.String,UnityEngine.AssetBundle@)">
            <summary>
            Attempts to load the <see cref="T:UnityEngine.AssetBundle"/>
            </summary>
            <param name="bundleName">The name of the bundle to load</param>
            <param name="assetBundle">The <see cref="T:UnityEngine.AssetBundle"/> that was loaded</param>
            <returns>Whether the bundle succesfully loaded</returns>
        </member>
        <member name="M:VDFramework.AssetBundles.AssetBundleUtil.TryUnloadAssetBundle(System.String,System.Boolean)">
            <summary>
            <para>Attempts to unload the <see cref="T:UnityEngine.AssetBundle"/></para>
            <para>This will fail if the bundle was not loaded</para>
            </summary>
            <param name="bundleName">The name of the bundle to unload</param>
            <param name="unloadAllLoadedObjects">Should the already loaded assets from this bundle also be unloaded?</param>
            <returns>Whether the bundle succesfully unloaded</returns>
        </member>
        <member name="M:VDFramework.AssetBundles.AssetBundleUtil.UnloadAllAssetBundles(System.Boolean)">
            <summary>
            Unloads all loaded <see cref="T:UnityEngine.AssetBundle"/>s
            </summary>
            <param name="unloadAllLoadedObjects">Should the already loaded assets from this bundle also be unloaded?</param>
        </member>
        <member name="T:VDFramework.BetterMonoBehaviour">
             <summary>
            <para>An 'improved' <see cref="T:UnityEngine.MonoBehaviour"/> which caches often used properties</para>
            <para>A standard call to 'transform' and 'gameobject' makes a call to the C++ side of Unity (where it is cached)</para>
            <para>this call has some overhead which can be removed by caching these on the C# side</para>
             </summary>
        </member>
        <member name="P:VDFramework.BetterMonoBehaviour.CachedTransform">
            <summary>
            The transform of this object
            </summary>
        </member>
        <member name="P:VDFramework.BetterMonoBehaviour.CachedGameObject">
            <summary>
            The gameobject where this component is attached to
            </summary>
        </member>
        <member name="P:VDFramework.BetterMonoBehaviour.transform">
            <summary>
            Overridden to return the CachedTransform
            </summary>
        </member>
        <member name="P:VDFramework.BetterMonoBehaviour.gameObject">
            <summary>
            Overridden to return the CachedGameObject
            </summary>
        </member>
        <member name="T:VDFramework.SafeEnableBehaviour">
            <summary>
            <para>A variation of an <see cref="T:VDFramework.BetterMonoBehaviour"/> that does <b>not</b> invoke <see cref="M:VDFramework.SafeEnableBehaviour.OnEnabled"/> before <see cref="M:VDFramework.SafeEnableBehaviour.Start"/></para>
            <para>Set <see cref="F:VDFramework.SafeEnableBehaviour.invokeOnEnabledAfterStart"/> to false if you do not want to immediately invoke <see cref="M:VDFramework.SafeEnableBehaviour.OnEnabled"/></para>
            </summary>
            <order>Awake() → Start() → OnEnabled()</order>
        </member>
        <member name="F:VDFramework.SafeEnableBehaviour.invokeOnEnabledAfterStart">
            <summary>
            If true, <see cref="M:VDFramework.SafeEnableBehaviour.OnEnabled"/> will be invoked immediately after <see cref="M:VDFramework.SafeEnableBehaviour.Start"/> (instead of waiting until the object is enabled again)
            </summary>
        </member>
        <member name="M:VDFramework.SafeEnableBehaviour.OnEnabled">
            <summary>
            This function is called when the object becomes enabled and active, but never before <see cref="M:VDFramework.SafeEnableBehaviour.Start"/>
            </summary>
        </member>
        <member name="M:VDFramework.SafeEnableBehaviour.Start">
            <summary>
            Unity's start function
            </summary>
        </member>
        <member name="T:VDFramework.MonoBehaviours.TimerManagerUpdater">
            <summary>
            <para>A simple utility behaviour for Unity that updates the TimerManager in Update using Time.deltaTime</para>
            <para>(makes the object DontDestroyOnLoad)</para>
            </summary>
        </member>
        <member name="T:VDFramework.RandomWrapper.UnityRandom">
            <summary>
            Provides a implementation of <see cref="T:VDFramework.RandomWrapper.Interface.IRandomNumberGenerator"/> using <see cref="T:UnityEngine.Random">UnityEngine.Random</see>
            </summary>
        </member>
        <member name="M:VDFramework.RandomWrapper.UnityRandom.SetSeed(System.Int32)">
            <inheritdoc cref="M:UnityEngine.Random.InitState(System.Int32)" />
            <seealso cref="P:UnityEngine.Random.state"/>
        </member>
        <member name="M:VDFramework.RandomWrapper.UnityRandom.GetSeed">
            <inheritdoc />
            <seealso cref="P:UnityEngine.Random.state"/>
        </member>
        <member name="M:VDFramework.RandomWrapper.UnityRandom.Next">
            <inheritdoc cref="M:System.Random.Next" />
        </member>
        <member name="M:VDFramework.RandomWrapper.UnityRandom.Next(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.RandomWrapper.UnityRandom.Next(System.Int32,System.Int32)">
            <inheritdoc cref="M:UnityEngine.Random.Range(System.Int32,System.Int32)"/>
        </member>
        <member name="M:VDFramework.RandomWrapper.UnityRandom.Next(System.Single)">
            <summary>
            Returns a random non-negative floating point number between 0 (inclusive) and the upper bound (inclusive)
            </summary>
        </member>
        <member name="M:VDFramework.RandomWrapper.UnityRandom.Next(System.Single,System.Single)">
            <inheritdoc cref="M:UnityEngine.Random.Range(System.Single,System.Single)"/>
        </member>
        <member name="M:VDFramework.RandomWrapper.UnityRandom.NextBytes(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.RandomWrapper.UnityRandom.NextBytes(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.RandomWrapper.UnityRandom.NextDouble">
            <summary>
            Returns a random double precision floating-point number between 0 (inclusive) and 1 (inclusive)
            </summary>
        </member>
        <member name="M:VDFramework.RandomWrapper.UnityRandom.NextFloat">
            <summary>
            Returns a random single precision floating-point number between 0 (inclusive) and 1 (inclusive)
            </summary>
        </member>
        <member name="M:VDFramework.RandomWrapper.UnityRandom.GetPercentage">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.RandomWrapper.Interface.IRandomNumberGenerator">
            <summary>
            Provides an interface for an RNG so that it is easy to swap it out with a different implementation
            </summary>
            <seealso cref="T:VDFramework.RandomWrapper.SystemRandom"/>
        </member>
        <member name="M:VDFramework.RandomWrapper.Interface.IRandomNumberGenerator.SetSeed(System.Int32)">
            <summary>
            Set the seed of the associated random number generator
            </summary>
        </member>
        <member name="M:VDFramework.RandomWrapper.Interface.IRandomNumberGenerator.GetSeed">
            <summary>
            Get the seed of the associated random number generator
            </summary>
        </member>
        <member name="M:VDFramework.RandomWrapper.Interface.IRandomNumberGenerator.Next">
            <summary>
            Returns a random integer<br/>
            The bounds are implementation defined
            </summary>
        </member>
        <member name="M:VDFramework.RandomWrapper.Interface.IRandomNumberGenerator.Next(System.Int32)">
            <summary>
            Returns a random non-negative integer between 0 and the upper bound (exclusive)
            </summary>
        </member>
        <member name="M:VDFramework.RandomWrapper.Interface.IRandomNumberGenerator.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random integer between the lower bound (inclusive) and the upper bound (exclusive)
            </summary>
        </member>
        <member name="M:VDFramework.RandomWrapper.Interface.IRandomNumberGenerator.Next(System.Single)">
            <summary>
            Returns a random non-negative floating point number between 0 and the upper bound<br/>
            Which bounds are inclusive and exclusive is implementation defined
            </summary>
        </member>
        <member name="M:VDFramework.RandomWrapper.Interface.IRandomNumberGenerator.Next(System.Single,System.Single)">
            <summary>
            Returns a random floating point number between the lower bound and the upper bound<br/>
            Which bounds are inclusive and exclusive is implementation defined
            </summary>
        </member>
        <member name="M:VDFramework.RandomWrapper.Interface.IRandomNumberGenerator.NextBytes(System.Span{System.Byte})">
            <summary>
            Fills the elements of a specified span of bytes with random numbers
            </summary>
            <param name="buffer">The span to be filled with random numbers.</param>
        </member>
        <member name="M:VDFramework.RandomWrapper.Interface.IRandomNumberGenerator.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">The array to be filled with random numbers.</param>
        </member>
        <member name="M:VDFramework.RandomWrapper.Interface.IRandomNumberGenerator.NextDouble">
            <summary>
            Returns a random double precision floating-point number between 0 and 1<br/>
            Which bounds are inclusive and exclusive is implementation defined
            </summary>
        </member>
        <member name="M:VDFramework.RandomWrapper.Interface.IRandomNumberGenerator.NextFloat">
            <summary>
            Returns a random single precision floating-point number between 0 and 1<br/>
            Which bounds are inclusive and exclusive is implementation defined
            </summary>
        </member>
        <member name="M:VDFramework.RandomWrapper.Interface.IRandomNumberGenerator.GetPercentage">
            <summary>
            Returns a random double precision floating-point number between 0 (inclusive) and 1 (exclusive)<br/>
            This allows for a reliable range for the purposes of, for example, a % chance
            </summary>
            <returns>A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="T:VDFramework.RandomWrapper.RandomDelegator">
            <summary>
            Provides an implementation of <see cref="T:VDFramework.RandomWrapper.Interface.IRandomNumberGenerator"/> that delegates all implementation to an underlying field.<br/>
            The idea is that you can reuse a single instance but still change the implementation of the random
            </summary>
        </member>
        <member name="F:VDFramework.RandomWrapper.RandomDelegator.RandomNumberGenerator">
            <summary>
            The implementation of <see cref="T:VDFramework.RandomWrapper.Interface.IRandomNumberGenerator"/> that is used for all the functions
            </summary>
        </member>
        <member name="M:VDFramework.RandomWrapper.RandomDelegator.#ctor(VDFramework.RandomWrapper.Interface.IRandomNumberGenerator)">
            <summary>
            Create a new instance of this class using the provided <see cref="T:VDFramework.RandomWrapper.Interface.IRandomNumberGenerator"/> implementation
            </summary>
        </member>
        <member name="M:VDFramework.RandomWrapper.RandomDelegator.SetSeed(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.RandomWrapper.RandomDelegator.GetSeed">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.RandomWrapper.RandomDelegator.Next">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.RandomWrapper.RandomDelegator.Next(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.RandomWrapper.RandomDelegator.Next(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.RandomWrapper.RandomDelegator.Next(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.RandomWrapper.RandomDelegator.Next(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.RandomWrapper.RandomDelegator.NextBytes(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.RandomWrapper.RandomDelegator.NextBytes(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.RandomWrapper.RandomDelegator.NextDouble">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.RandomWrapper.RandomDelegator.NextFloat">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.RandomWrapper.RandomDelegator.GetPercentage">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.RandomWrapper.SystemRandom">
            <summary>
            Provides a implementation of <see cref="T:VDFramework.RandomWrapper.Interface.IRandomNumberGenerator"/> using <see cref="T:System.Random">System.Random</see>
            </summary>
            <seealso cref="P:VDFramework.RandomWrapper.SystemRandom.StaticInstance">SystemRandom.StaticInstance</seealso>
        </member>
        <member name="P:VDFramework.RandomWrapper.SystemRandom.StaticInstance">
            <summary>
            Returns a static instance of this class <br/>
            A new instance will be created the first time this field is used
            </summary>
        </member>
        <member name="M:VDFramework.RandomWrapper.SystemRandom.SetSeed(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.RandomWrapper.SystemRandom.GetSeed">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.RandomWrapper.SystemRandom.Next">
            <inheritdoc cref="M:System.Random.Next" />
        </member>
        <member name="M:VDFramework.RandomWrapper.SystemRandom.Next(System.Int32)">
            <inheritdoc cref="M:System.Random.Next(System.Int32)" />
        </member>
        <member name="M:VDFramework.RandomWrapper.SystemRandom.Next(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Random.Next(System.Int32,System.Int32)" />
        </member>
        <member name="M:VDFramework.RandomWrapper.SystemRandom.Next(System.Single)">
            <summary>
            Returns a random non-negative floating point number between 0 and the upper bound (exclusive)
            </summary>
        </member>
        <member name="M:VDFramework.RandomWrapper.SystemRandom.Next(System.Single,System.Single)">
            <summary>
            Returns a random floating point number between the lower bound (inclusive) and the upper bound (exclusive)
            </summary>
        </member>
        <member name="M:VDFramework.RandomWrapper.SystemRandom.NextBytes(System.Span{System.Byte})">
            <summary>Fills the elements of a specified span of bytes with random numbers.</summary>
            <param name="buffer">The span to be filled with random numbers.</param>
        </member>
        <member name="M:VDFramework.RandomWrapper.SystemRandom.NextBytes(System.Byte[])">
            <inheritdoc cref="M:System.Random.NextBytes(System.Byte[])" />
        </member>
        <member name="M:VDFramework.RandomWrapper.SystemRandom.NextDouble">
            <inheritdoc cref="M:System.Random.NextDouble" />
        </member>
        <member name="M:VDFramework.RandomWrapper.SystemRandom.NextFloat">
            <inheritdoc cref="M:System.Random.NextDouble" />
            <returns>A single-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:VDFramework.RandomWrapper.SystemRandom.GetPercentage">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Singleton.Singleton`1">
            <summary>
            A abstract generic implementation of the singleton pattern
            </summary>
            <typeparam name="TSingleton">The type to create a singleton of</typeparam>
        </member>
        <member name="P:VDFramework.Singleton.Singleton`1.Instance">
            <summary>
            Returns an instance of this Singleton or initializes it if it does not exist yet (lazy-initialization)
            </summary>
        </member>
        <member name="M:VDFramework.Singleton.Singleton`1.DestroyInstance">
            <summary>
            Sets the instance of the singleton to null.
            </summary>
        </member>
        <member name="T:VDFramework.UnityExtensions.BehaviourExtensions">
            <summary>
            Contains extension methods for <see cref="T:UnityEngine.Behaviour"/>
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.BehaviourExtensions.Enable(UnityEngine.Behaviour)">
            <summary>
            Disable this behaviour
            </summary>
            <seealso cref="P:UnityEngine.Behaviour.enabled"/>
        </member>
        <member name="M:VDFramework.UnityExtensions.BehaviourExtensions.Disable(UnityEngine.Behaviour)">
            <summary>
            Enable this behaviour
            </summary>
            <seealso cref="P:UnityEngine.Behaviour.enabled"/>
        </member>
        <member name="T:VDFramework.UnityExtensions.ColliderExtensions">
            <summary>
            Contains extension methods for <see cref="T:UnityEngine.Collider"/>
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.ColliderExtensions.Enable(UnityEngine.Collider)">
            <summary>
            Disable this collider
            </summary>
            <seealso cref="P:UnityEngine.Collider.enabled"/>
        </member>
        <member name="M:VDFramework.UnityExtensions.ColliderExtensions.Disable(UnityEngine.Collider)">
            <summary>
            Enable this collider
            </summary>
            <seealso cref="P:UnityEngine.Collider.enabled"/>
        </member>
        <member name="T:VDFramework.UnityExtensions.ColorExtensions">
            <summary>
            Contains extension methods for <see cref="T:UnityEngine.Color"/>
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.ColorExtensions.DistanceSquared(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Returns the raw distance between 2 colours
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.ColorExtensions.DistanceSquaredHSV(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Returns the raw distance between the HSV of the colours
            </summary>
        </member>
        <member name="T:VDFramework.UnityExtensions.ComponentExtensions">
            <summary>
            Contains extension methods for <see cref="T:UnityEngine.Component"/>
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.ComponentExtensions.ToGameObject``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Transforms a collections of components to a collection of their <see cref="T:UnityEngine.GameObject"/>s
            </summary>
        </member>
        <member name="T:VDFramework.UnityExtensions.CoroutineExtensions">
            <summary>
            Contains several extension methods that add extra functions to coroutines
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.Then(System.Collections.IEnumerator,System.Collections.IEnumerator)">
            <summary>
                Execute another coroutine immediately after this one is done
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.Wait(System.Collections.IEnumerator,System.Single)">
            <summary>
                Wait for a set amount of seconds immediately after this coroutine
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.WaitRealTime(System.Collections.IEnumerator,System.Single)">
            <summary>
                Wait for a set amount of real-time seconds immediately after this coroutine
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.Repeat(System.Collections.IEnumerator,System.Int32)">
            <summary>
                Repeats the given Coroutine.
            </summary>
            <param name="enumerator">The Coroutine that is being repeated.</param>
            <param name="count">The Amount of repetitions. -1 to repeat indefinetly</param>
            <returns>Repeating Coroutine</returns>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.If(System.Collections.IEnumerator,System.Func{System.Boolean})">
            <summary>
            Executes the coroutine if the condition is true
            </summary>
            <param name="enumerator">The coroutine to be executed</param>
            <param name="condition">The condition that has to be met for the execution</param>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.Else(VDFramework.UnityExtensions.ConditionalEnumerator,System.Collections.IEnumerator)">
            <summary>
            Executes the coroutine if the <see cref="M:VDFramework.UnityExtensions.CoroutineExtensions.If(System.Collections.IEnumerator,System.Func{System.Boolean})"/> is false
            </summary>
            <param name="enumerator">The <see cref="T:VDFramework.UnityExtensions.ConditionalEnumerator"/> whose condition to check</param>
            <param name="elseCoroutine">The coroutine to be executed</param>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.While(System.Collections.IEnumerator,System.Func{System.Boolean})">
            <summary>
            Executes the coroutine while the condition is true
            </summary>
            <param name="enumerator">The coroutine to be executed</param>
            <param name="condition">The condition that has to be met for the execution</param>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.Then(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
                Execute another coroutine immediately after this one is done
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.Wait(System.Collections.IEnumerable,System.Single)">
            <summary>
                Wait for a set amount of seconds immediately after this coroutine
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.WaitRealTime(System.Collections.IEnumerable,System.Single)">
            <summary>
                Wait for a set amount of real-time seconds immediately after this coroutine
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.Repeat(System.Collections.IEnumerable,System.Int32)">
            <summary>
                Repeats the given Coroutine.
            </summary>
            <param name="enumerable">The Coroutine that is being repeated.</param>
            <param name="count">The Amount of repetitions. -1 to repeat indefinetly</param>
            <returns>Repeating Coroutine</returns>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.If(System.Collections.IEnumerable,System.Func{System.Boolean})">
            <summary>
            Executes the coroutine if the condition is true
            </summary>
            <param name="enumerable">The coroutine to be executed</param>
            <param name="condition">The condition that has to be met for the execution</param>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.Else(VDFramework.UnityExtensions.ConditionalEnumerable,System.Collections.IEnumerable)">
            <summary>
            Executes the coroutine if the <see cref="M:VDFramework.UnityExtensions.CoroutineExtensions.If(System.Collections.IEnumerable,System.Func{System.Boolean})"/> is false
            </summary>
            <param name="enumerable">The <see cref="T:VDFramework.UnityExtensions.ConditionalEnumerator"/> whose condition to check</param>
            <param name="elseCoroutine">The coroutine to be executed</param>
        </member>
        <member name="M:VDFramework.UnityExtensions.CoroutineExtensions.While(System.Collections.IEnumerable,System.Func{System.Boolean})">
            <summary>
            Executes the coroutine while the condition is true
            </summary>
            <param name="enumerable">The coroutine to be executed</param>
            <param name="condition">The condition that has to be met for the execution</param>
        </member>
        <member name="T:VDFramework.UnityExtensions.ConditionalEnumerator">
            <summary>
            An abstract base class that has properties specificially aimed at conditional execution
            </summary>
        </member>
        <member name="F:VDFramework.UnityExtensions.ConditionalEnumerator.enumerator">
            <summary>
            The enumerator to execute depending on the <see cref="F:VDFramework.UnityExtensions.ConditionalEnumerator.executionCondition"/>
            </summary>
        </member>
        <member name="F:VDFramework.UnityExtensions.ConditionalEnumerator.executionCondition">
            <summary>
            The condition for the execution
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.ConditionalEnumerator.#ctor(System.Collections.IEnumerator,System.Func{System.Boolean})">
            <summary>
            An abstract base class that has properties specificially aimed at conditional execution
            </summary>
            <param name="enumerator">The enumerator to execute depending on the <see cref="F:VDFramework.UnityExtensions.ConditionalEnumerator.executionCondition"/></param>
            <param name="condition">The condition for the execution</param>
        </member>
        <member name="P:VDFramework.UnityExtensions.ConditionalEnumerator.ExecutedOnce">
            <summary>
            Will be true if the enumerator has ran at least once
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.ConditionalEnumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.UnityExtensions.ConditionalEnumerator.Reset">
            <inheritdoc />
        </member>
        <member name="P:VDFramework.UnityExtensions.ConditionalEnumerator.Current">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.UnityExtensions.ConditionalEnumerator.SetExecutedOnce">
            <summary>
            Flag this enumerator as 'has ran at least once'
            </summary>
            <seealso cref="P:VDFramework.UnityExtensions.ConditionalEnumerator.ExecutedOnce"/>
        </member>
        <member name="T:VDFramework.UnityExtensions.IfEnumerator">
            <summary>
            An Enumerator that executes the enumerator if the condition is true
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.IfEnumerator.#ctor(System.Collections.IEnumerator,System.Func{System.Boolean})">
            <summary>
            An Enumerator that executes the enumerator if the condition is true
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.UnityExtensions.IfEnumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.UnityExtensions.WhileEnumerator">
            <summary>
            An Enumerator that executes as long as the condition is true
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.WhileEnumerator.#ctor(System.Collections.IEnumerator,System.Func{System.Boolean})">
            <summary>
            An Enumerator that executes as long as the condition is true
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.UnityExtensions.WhileEnumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.UnityExtensions.ConditionalEnumerable">
            <summary>
            An abstract base class that has properties specificially aimed at conditional execution
            </summary>
        </member>
        <member name="F:VDFramework.UnityExtensions.ConditionalEnumerable.enumerable">
            <summary>
            The enumerable to execute depending on the <see cref="F:VDFramework.UnityExtensions.ConditionalEnumerable.executionCondition"/>
            </summary>
        </member>
        <member name="F:VDFramework.UnityExtensions.ConditionalEnumerable.executionCondition">
            <summary>
            The condition for the execution
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.ConditionalEnumerable.#ctor(System.Collections.IEnumerable,System.Func{System.Boolean})">
            <summary>
            An abstract base class that has properties specificially aimed at conditional execution
            </summary>
            <param name="enumerable">The enumerable to execute depending on the <see cref="F:VDFramework.UnityExtensions.ConditionalEnumerable.executionCondition"/></param>
            <param name="condition">The condition for the execution</param>
        </member>
        <member name="M:VDFramework.UnityExtensions.ConditionalEnumerable.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.UnityExtensions.ConditionalEnumerable.InnerGetEnumerator">
            <summary>
             Returns the Enumerator of the underlaying Enumerable
            </summary>
             <inheritdoc cref="M:VDFramework.UnityExtensions.ConditionalEnumerable.GetEnumerator"/>
        </member>
        <member name="T:VDFramework.UnityExtensions.IfEnumerable">
            <summary>
            An Enumerable that executes the enumerator if the condition is true
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.IfEnumerable.#ctor(System.Collections.IEnumerable,System.Func{System.Boolean})">
            <summary>
            An Enumerable that executes the enumerator if the condition is true
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.UnityExtensions.IfEnumerable.InnerGetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.UnityExtensions.WhileEnumerable">
            <summary>
            An Enumerable that executes as long as the condition is true
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.WhileEnumerable.#ctor(System.Collections.IEnumerable,System.Func{System.Boolean})">
            <summary>
            An Enumerable that executes as long as the condition is true
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.UnityExtensions.WhileEnumerable.InnerGetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.UnityExtensions.GameObjectExtensions">
            <summary>
            Contains extension methods for <see cref="T:UnityEngine.GameObject"/>
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.GameObjectExtensions.DestroyOnLoad(UnityEngine.GameObject)">
            <summary>
            Mark this object to be destroyed on load (the reverse of DontDestroyOnLoad)
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.GameObjectExtensions.EnsureComponent``1(UnityEngine.GameObject)">
            <summary>
            Ensures that the specified <see cref="T:UnityEngine.Component"/> is on this <see cref="T:UnityEngine.GameObject"/> by creating it if it does not exists
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.GameObjectExtensions.EnsureComponent``1(UnityEngine.Component)">
            <summary>
            Ensures that the specified <see cref="T:UnityEngine.Component"/> is on this <see cref="T:UnityEngine.GameObject"/> by creating it if it does not exists
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.GameObjectExtensions.TryGetComponentInChildren``1(UnityEngine.GameObject,``0@,System.Boolean)">
            <summary>
            Attempts to get the specified <see cref="T:UnityEngine.Component"/> in one of the children and returns whether one was found
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.GameObjectExtensions.TryGetComponentInChildren``1(UnityEngine.Component,``0@,System.Boolean)">
            <summary>
            Attempts to get the specified <see cref="T:UnityEngine.Component"/> in one of the children and returns whether one was found
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.GameObjectExtensions.TryGetComponentInParent``1(UnityEngine.GameObject,``0@,System.Boolean)">
            <summary>
            Attempts to get the specified <see cref="T:UnityEngine.Component"/> in one of the parents and returns whether one was found
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.GameObjectExtensions.TryGetComponentInParent``1(UnityEngine.Component,``0@,System.Boolean)">
            <summary>
            Attempts to get the specified <see cref="T:UnityEngine.Component"/> in one of the parents and returns whether one was found
            </summary>
        </member>
        <member name="T:VDFramework.UnityExtensions.TransformExtensions">
            <summary>
            Contains extension methods for <see cref="T:UnityEngine.Transform"/>
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.TransformExtensions.DestroyChildren(UnityEngine.Transform)">
            <summary>
            Destroys all children
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.TransformExtensions.DestroyChildrenImmediate(UnityEngine.Transform)">
            <summary>
            Destroys all children immediately
            </summary>
        </member>
        <member name="T:VDFramework.UnityExtensions.VectorExtensions">
            <summary>
            Contains Extension methods for Vectors
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.VectorExtensions.Abs(UnityEngine.Vector2)">
            <summary>
            Return the absolute value of this vector
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.VectorExtensions.Abs(UnityEngine.Vector2Int)">
            <summary>
            Return the absolute value of this vector
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.VectorExtensions.Abs(UnityEngine.Vector3)">
            <summary>
            Return the absolute value of this vector
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.VectorExtensions.Abs(UnityEngine.Vector3Int)">
            <summary>
            Return the absolute value of this vector
            </summary>
        </member>
        <member name="M:VDFramework.UnityExtensions.VectorExtensions.Abs(UnityEngine.Vector4)">
            <summary>
            Return the absolute value of this vector
            </summary>
        </member>
        <member name="T:VDFramework.Utility.MathUtility.Shapes.BoundsUtils">
            <summary>
            Provides helper functions for the <see cref="T:UnityEngine.Bounds"/> struct
            </summary>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.Shapes.BoundsUtils.IsPointWithinBounds(UnityEngine.Bounds,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Tests whether the given point is inside the bounds
            </summary>
            <param name="bounds">The bounds to test against</param>
            <param name="point">The point to test against the bounds</param>
            <param name="acceptPointOnEdge">If true, the function will return true if the point is on the edge of the bounds</param>
            <returns>TRUE or FALSE depending on if the given point falls within the bounds</returns>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.Shapes.EllipseUtil.IsPointWithinEllipse(UnityEngine.Vector2,System.Single,System.Single,UnityEngine.Vector2,System.Boolean,System.Boolean@)">
            <summary>
            Tests whether the given point is within the axis-alligned ellipse
            </summary>
            <param name="origin">The centre of the ellipse</param>
            <param name="xRadius">The radius of the x side of the ellipse</param>
            <param name="yRadius">The radius of the y side of the ellipse</param>
            <param name="point">The point to check against the ellipse</param>
            <param name="acceptPointOnEdge">If the point is on the edge, should the function still return true?</param>
            <param name="pointIsOnEdge">Whether or not the point is located on the edge of the ellipse</param>
            <returns>Whether or not the point is inside the ellipse</returns>
            <credit>https://math.stackexchange.com/a/243525</credit>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.Shapes.EllipseUtil.GetBoundingBoxOfEllipse(UnityEngine.Vector2,System.Single,System.Single)">
            <summary>
            Returns the axis-alligned bounding-box of the given ellipse
            </summary>
            <param name="origin">The centre of the ellipse</param>
            <param name="xRadius">The radius of the x side of the ellipse</param>
            <param name="yRadius">The radius of the y side of the ellipse</param>
            <returns>The bounding box of the ellipse</returns>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.Shapes.EllipseUtil.ProjectPointOntoEllipse(UnityEngine.Vector2,System.Single,System.Single,UnityEngine.Vector2,System.Boolean)">
            <summary>
            Projects a point onto the ellipse and returns the point on the epplipse, optionally returns the point itself if it is within the ellipse
            </summary>
            <param name="origin">The centre of the ellipse</param>
            <param name="xRadius">The radius of the x side of the ellipse</param>
            <param name="yRadius">The radius of the y side of the ellipse</param>
            <param name="point">The point to project on the ellipse</param>
            <param name="returnPointIfWithinEllipse">If the point falls within the ellipse, should the point itself be returned?</param>
            <returns>A point on the edge of the ellipse, closest to the given point. Or, optionally, the given point if it falls within the ellipse</returns>
            <credit>https://gist.github.com/JohannesMP/777bdc8e84df6ddfeaa4f0ddb1c7adb3</credit>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.Shapes.EllipseUtil.GetDistanceToEllipse(UnityEngine.Vector2,System.Single,System.Single,UnityEngine.Vector2,System.Boolean)">
            <summary>
            Calculates the distance from the given point to the ellipse, or optionally the distance from the point to the edge of the ellipse if the point falls within the ellipse
            </summary>
            <param name="origin">The centre of the ellipse</param>
            <param name="semiMajor">The radius of the longest side of the ellipse</param>
            <param name="semiMinor">The radius of the shortest side of the ellipse</param>
            <param name="point">The point to project on the ellipse</param>
            <param name="measureDistanceToEdgeIfWithinEllipse">If the point falls within the ellipse, should the distance to the edge be calculated?</param>
            <returns>The distance from the given point to the ellipse</returns>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.Shapes.PolygonUtil.ProjectPointOntoPolygon2D(UnityEngine.Vector2[],UnityEngine.Vector2,System.Boolean)">
            <summary>
            Projects a point onto the polygon and returns the point on the polygon, optionally returns the point itself if it is within the polygon
            </summary>
            <param name="polygon">An array of vertices of the polygon</param>
            <param name="point">The point to project onto the polygon</param>
            <param name="returnPointIfWithinPolygon">If the point falls within the polygon, should the point itself be returned?</param>
            <returns>A point on the edge of the polygon, closest to the given point. Or, optionally, the given point if it falls within the polygon</returns>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.Shapes.PolygonUtil.ProjectPointOntoPolygon(UnityEngine.Vector3[],UnityEngine.Vector3,System.Boolean)">
            <summary>
            Projects a point onto the polygon and returns the point on the polygon, optionally returns the point itself if it is within the polygon
            </summary>
            <param name="polygon">An array of vertices of the polygon</param>
            <param name="point">The point to project onto the polygon</param>
            <param name="returnPointIfWithinPolygon">If the point falls within the polygon, should the point itself be returned?</param>
            <returns>A point on the edge of the polygon, closest to the given point. Or, optionally, the given point if it falls within the polygon</returns>
        </member>
        <member name="T:VDFramework.Utility.MathUtility.Shapes.RectUtils">
            <summary>
            Provides helper functions for the <see cref="T:UnityEngine.Rect"/> struct
            </summary>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.Shapes.RectUtils.IsPointWithinRect(UnityEngine.Rect,UnityEngine.Vector2,System.Boolean)">
            <summary>
            Tests whether the given point is inside the rect
            </summary>
            <param name="rect">The rectangle to test against</param>
            <param name="point">The point to test against the rectangle</param>
            <param name="acceptPointOnRect">If true, the function will return true if the point is on the edge of the rectangle</param>
            <returns>TRUE or FALSE depending on if the given point falls within the rectangle</returns>
        </member>
        <member name="T:VDFramework.Utility.MathUtility.VectorMath.VectorProjectionUtil">
            <summary>
            Provides helper functions to do vector math
            </summary>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.VectorMath.VectorProjectionUtil.ProjectPointOntoLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Projects a point onto a line and returns the projected point, optionally clamps the returned point to the line
            </summary>
            <param name="lineStart">The start point of the line</param>
            <param name="line">The line to project to</param>
            <param name="point">The point to project onto the line</param>
            <param name="ensureReturnedPointIsOnLine">Should the projected point be clamped between the end points of the line?</param>
            <returns>A point on the line closest to the given point</returns>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.VectorMath.VectorProjectionUtil.ProjectPointOntoLineBetweenPoints(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Projects a point onto a line and returns the projected point, optionally clamps the returned point to the line
            </summary>
            <param name="lineStart">The start point of the line</param>
            <param name="lineEnd">The end point of the line</param>
            <param name="point">The point to project onto the line</param>
            <param name="ensureReturnedPointIsOnLine">Should the projected point be clamped between the end points of the line?</param>
            <returns>A point on the line closest to the given point</returns>
            <returns></returns>
        </member>
        <member name="T:VDFramework.Utility.MathUtility.LinearInterpolationUtil">
            <summary>
            Provides helper functions for linear interpolation between values
            </summary>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.LinearInterpolationUtil.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Provides the value at t% between a and b
            </summary>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.LinearInterpolationUtil.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Provides the value at t% between a and b
            </summary>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.LinearInterpolationUtil.InverseLerp(System.Double,System.Double,System.Double)">
            <summary>
            Provides the % between a and b at value
            </summary>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.LinearInterpolationUtil.InverseLerp(System.Single,System.Single,System.Single)">
            <summary>
            Provides the % between a and b at value
            </summary>
        </member>
        <member name="T:VDFramework.Utility.MathUtility.MathConstants">
            <summary>
            Contains constants used for mathematical operations
            </summary>
        </member>
        <member name="F:VDFramework.Utility.MathUtility.MathConstants.THIRD">
            <summary>
            The constant 1/3
            </summary>
        </member>
        <member name="F:VDFramework.Utility.MathUtility.MathConstants.GoldenRatio">
            <summary>
            The 'extreme and mean ratio' or 'divine proportion' calculated as<br/>(1 + √5) / 2<br/>1.618033988749...
            </summary>
            <symbol>φ (phi)</symbol>
            <theory>https://en.wikipedia.org/wiki/Golden_ratio#Calculation</theory>
        </member>
        <member name="T:VDFramework.Utility.MathUtility.MathFunctions">
            <summary>
            Provides implementations of mathematical functions
            </summary>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.MathFunctions.CubicRoot(System.Double)">
            <summary>
            Returns the cubic root of the given value
            </summary>
            <math>³√x</math>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.MathFunctions.CubicRoot(System.Numerics.Complex)">
            <summary>
            Returns the cubic root of the given complex number
            </summary>
            <math>³√x</math>
        </member>
        <member name="T:VDFramework.Utility.MathUtility.MathUtil">
            <summary>
            Static class that contains useful math functions
            </summary>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.MathUtil.GetSignFactor(System.Single)">
            <summary>
            Returns a number depending on the sign of the input
            </summary>
            <returns>negative: -1 | zero: 0 | positive: 1</returns>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.MathUtil.GetYCoordinateOnCurve(System.Single,System.Single,System.Single)">
            <summary>
            Get the Y coordinate of a 2D curve that crosses y = 0 at [0,0] and [distance,0] with a maxY of height
            </summary>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.MathUtil.GetXCoordinatesOnCurve(System.Single,System.Single,System.Single)">
            <summary>
            Get the X coordinates of a 2D curve that crosses y = 0 at [0,0] and [distance,0] with a maxY of height
            </summary>
        </member>
        <member name="T:VDFramework.Utility.MathUtility.NumberUtil">
            <summary>
            Static class that contains functions for getting data about numbers
            </summary>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.NumberUtil.ToFraction(System.Decimal,System.Int64@,System.Int64@)">
            <summary>
            Breaks down the given number into a numerator and a denominator and converts it to its simplest form
            </summary>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.NumberUtil.ToFraction(System.Double,System.Int64@,System.Int64@,System.Int32)">
            <summary>
            Breaks down the given number into a numerator and a denominator and converts it to its simplest form
            </summary>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.NumberUtil.ToFraction(System.Single,System.Int64@,System.Int64@,System.Int32)">
            <summary>
            Breaks down the given number into a numerator and a denominator and converts it to its simplest form
            </summary>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.NumberUtil.GetLeastCommonMultiple(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Returns the Least Common Multiple of the given floating point numbers
            </summary>
            <theory>
            https://en.wikipedia.org/wiki/Euclidean_algorithm<br/>
            https://en.wikipedia.org/wiki/Least_common_multiple
            </theory>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.NumberUtil.GetLeastCommonMultiple(System.Collections.Generic.IEnumerable{System.Single},System.Int32)">
            <summary>
            Returns the Least Common Multiple of the given floating point numbers
            </summary>
            <theory>
            https://en.wikipedia.org/wiki/Euclidean_algorithm<br/>
            https://en.wikipedia.org/wiki/Least_common_multiple
            </theory>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.NumberUtil.GetLeastCommonMultiple(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Returns the Least Common Multiple of the given numbers
            </summary>
            <credit>https://stackoverflow.com/questions/147515/least-common-multiple-for-3-or-more-numbers/29717490#29717490</credit>
            <theory>
            https://en.wikipedia.org/wiki/Euclidean_algorithm<br/>
            https://en.wikipedia.org/wiki/Least_common_multiple
            </theory>
        </member>
        <member name="M:VDFramework.Utility.MathUtility.NumberUtil.GetLeastCommonMultiple(System.Int64,System.Int64)">
            <summary>
            Returns the Least Common Multiple of the given numbers
            </summary>
            <theory>
            https://en.wikipedia.org/wiki/Euclidean_algorithm<br/>
            https://en.wikipedia.org/wiki/Least_common_multiple
            </theory>
        </member>
        <member name="T:VDFramework.Utility.QuaternionMathUtil">
            <summary>
            Contains helper functions for <see cref="T:UnityEngine.Quaternion"/> math
            </summary>
        </member>
        <member name="M:VDFramework.Utility.QuaternionMathUtil.IsApproximate(UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single)">
            <summary>
            Checks if two quaternions are approximately the same
            </summary>
            <param name="lhs">The first quaternion to compare</param>
            <param name="rhs">The second quaternion to compare</param>
            <param name="precision">
            <para>An acceptable range for quaternions to still be counted as equal</para>
            <para>0.1 degree difference is a difference of 0.0000004f</para>
            </param>
            <credit>https://discussions.unity.com/t/how-do-i-compare-quaternions/47274/6</credit>
        </member>
        <member name="T:VDFramework.Utility.DataTypes.DoubleUtil">
            <summary>
            Provides utility functions specifically aimed at double precision floating-point numbers
            </summary>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.DoubleUtil.AreClose(System.Double,System.Double)">
            <summary>
            Tests whether the given values are very close to eachother (almost equal)
            </summary>
            <reference>https://stackoverflow.com/a/35418564</reference>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.DoubleUtil.LessThan(System.Double,System.Double)">
            <summary>
            Tests whether the left value is less than the right value (and not almost equal)
            </summary>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.DoubleUtil.GreaterThan(System.Double,System.Double)">
            <summary>
            Tests whether the left value is greater than the right value (and not almost equal)
            </summary>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.DoubleUtil.LesserThanOrClose(System.Double,System.Double)">
            <summary>
            Tests whether the left value is less than or close to the right value
            </summary>
            <seealso cref="M:VDFramework.Utility.DataTypes.DoubleUtil.AreClose(System.Double,System.Double)"/>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.DoubleUtil.LesserThanOrClose(System.Double,System.Double,System.Boolean@)">
            <summary>
            Tests whether the left value is less than or close to the right value.<br/>
            Returns whether or not the values are close as an out parameter
            </summary>
            <seealso cref="M:VDFramework.Utility.DataTypes.DoubleUtil.AreClose(System.Double,System.Double)"/>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.DoubleUtil.GreaterThanOrClose(System.Double,System.Double)">
            <summary>
            Tests whether the left value is greater than or close to the right value
            </summary>
            <seealso cref="M:VDFramework.Utility.DataTypes.DoubleUtil.AreClose(System.Double,System.Double)"/>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.DoubleUtil.GreaterThanOrClose(System.Double,System.Double,System.Boolean@)">
            <summary>
            Tests whether the left value is greater than or close to the right value.<br/>
            Returns whether or not the values are close as an out parameter
            </summary>
            <seealso cref="M:VDFramework.Utility.DataTypes.DoubleUtil.AreClose(System.Double,System.Double)"/>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.DoubleUtil.IsOne(System.Double)">
            <summary>
            Tests whether the given value is almost equal to 1
            </summary>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.DoubleUtil.IsZero(System.Double)">
            <summary>
            Tests whether the given value is almost equal to 0
            </summary>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.DoubleUtil.AreClose(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Tests whether the given points are almost equal
            </summary>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.DoubleUtil.AreClose(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Tests whether the given sizes are almost equal
            </summary>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.DoubleUtil.IsBetweenZeroAndOne(System.Double,System.Boolean,System.Boolean)">
            <summary>
            Tests whether the given value is between 0.0 and 1.0.<br/>
            Which bounds are inclusive and exclusive are set through the parameters
            </summary>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.DoubleUtil.RoundToInt(System.Double)">
            <summary>
            Rounds the given value to the nearest int
            </summary>
        </member>
        <member name="T:VDFramework.Utility.DataTypes.FloatUtil">
            <summary>
            Provides utility functions specifically aimed at single precision floating-point numbers
            </summary>
            <seealso cref="T:VDFramework.Utility.DataTypes.DoubleUtil"/>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.FloatUtil.AreClose(System.Single,System.Single)">
            <inheritdoc cref="M:VDFramework.Utility.DataTypes.DoubleUtil.AreClose(System.Double,System.Double)"/>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.FloatUtil.LessThan(System.Single,System.Single)">
            <inheritdoc cref="M:VDFramework.Utility.DataTypes.DoubleUtil.LessThan(System.Double,System.Double)"/>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.FloatUtil.GreaterThan(System.Single,System.Single)">
            <inheritdoc cref="M:VDFramework.Utility.DataTypes.DoubleUtil.GreaterThan(System.Double,System.Double)"/>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.FloatUtil.LesserThanOrClose(System.Single,System.Single)">
            <inheritdoc cref="M:VDFramework.Utility.DataTypes.DoubleUtil.LesserThanOrClose(System.Double,System.Double)"/>
            <seealso cref="M:VDFramework.Utility.DataTypes.FloatUtil.AreClose(System.Single,System.Single)"/>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.FloatUtil.LesserThanOrClose(System.Single,System.Single,System.Boolean@)">
            <inheritdoc cref="M:VDFramework.Utility.DataTypes.DoubleUtil.LesserThanOrClose(System.Double,System.Double,System.Boolean@)"/>
            <seealso cref="M:VDFramework.Utility.DataTypes.FloatUtil.AreClose(System.Single,System.Single)"/>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.FloatUtil.GreaterThanOrClose(System.Single,System.Single)">
            <inheritdoc cref="M:VDFramework.Utility.DataTypes.DoubleUtil.GreaterThanOrClose(System.Double,System.Double)"/>
            <seealso cref="M:VDFramework.Utility.DataTypes.FloatUtil.AreClose(System.Single,System.Single)"/>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.FloatUtil.GreaterThanOrClose(System.Single,System.Single,System.Boolean@)">
            <inheritdoc cref="M:VDFramework.Utility.DataTypes.DoubleUtil.GreaterThanOrClose(System.Double,System.Double,System.Boolean@)"/>
            <seealso cref="M:VDFramework.Utility.DataTypes.FloatUtil.AreClose(System.Single,System.Single)"/>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.FloatUtil.IsOne(System.Double)">
            <inheritdoc cref="M:VDFramework.Utility.DataTypes.DoubleUtil.IsOne(System.Double)"/>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.FloatUtil.IsZero(System.Double)">
            <inheritdoc cref="M:VDFramework.Utility.DataTypes.DoubleUtil.IsZero(System.Double)"/>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.FloatUtil.IsBetweenZeroAndOne(System.Double,System.Boolean,System.Boolean)">
            <inheritdoc cref="M:VDFramework.Utility.DataTypes.DoubleUtil.IsBetweenZeroAndOne(System.Double,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.FloatUtil.RoundToInt(System.Single)">
            <summary>
            Rounds the given value to the nearest int
            </summary>
        </member>
        <member name="T:VDFramework.Utility.DataTypes.StringUtil">
            <summary>
            Contains utility functions for the built-in <see cref="T:System.String"/> type
            </summary>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.StringUtil.EnforceLength(System.String,System.Int32,System.Char,System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Returns a string with specified length where certain substrings will only count as 1 char
            </summary>
            <param name="desiredLength">The length that you want the returned string to be</param>
            <param name="addCharToEnd">In case the string is too short, add character to get the desired length</param>
            <param name="countAs1Char">A collection of substrings that will only count as 1 char for the purposes of returning the desired length</param>
            <param name="string">The string whose length to enforce</param>
        </member>
        <member name="F:VDFramework.Utility.DataTypes.StringUtil.escapeCharacter">
            <summary>
            The backslash character '\'
            </summary>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.StringUtil.GetDepthAtIndex(System.String,System.String,System.String,System.Int32)">
            <summary>
            Tests how 'deep' the given index is determined by nested pairs of <paramref name="a"/> and <paramref name="b"/>
            </summary>
            <param name="input">The string to search for pairs</param>
            <param name="a">The string that represents the opening of a pair</param>
            <param name="b">The string that represents the closing of a pair</param>
            <param name="lookupIndex">The index to check the depth (nested-ness) for</param>
            <returns>The depth of the given index<br/>0 means it is not within any pair (or no pair could be found)</returns>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.StringUtil.GetMatchingPairs(System.String,System.String,System.String)">
            <summary>
            Find all matching pairs of <paramref name="a"/> and <paramref name="b"/>
            </summary>
            <param name="input">The string to search for pairs</param>
            <param name="a">The string that represents the opening of a pair</param>
            <param name="b">The string that represents the closing of a pair</param>
            <returns>
            A list of tuples that represent: (OpeningIndex, ClosingIndex, Depth)<br/>
            with Depth=1 meaning it is not nested within another pair
            </returns>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.StringUtil.GetFirstMatchingPair(System.String,System.String,System.String,System.Int32)">
            <summary>
            Find the first matching pair of <paramref name="a"/> and <paramref name="b"/>
            </summary>
            <param name="input">The string to search for pairs</param>
            <param name="a">The string that represents the opening of a pair</param>
            <param name="b">The string that represents the closing of a pair</param>
            <param name="startIndex">The index from where to start searching for a matching pair in the string</param>
            <returns>
            A tuple that represents: (OpeningIndex, ClosingIndex)
            </returns>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.StringUtil.GetStringsBetweenAandB(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get the strings between all pairs of two strings, optionally including the two strings
            </summary>
            <param name="input">The string to get the substrings from</param>
            <param name="a">The string that represents the opening of a pair</param>
            <param name="b">The string that represents the closing of a pair</param>
            <param name="includeAandB">Whether <paramref name="a"/> and <paramref name="b"/> should be included in the result</param>
            <returns>
            A list of substrings of every occurance of pairs, sorted from most-nested to least-nested<br/>
            Returns an empty list if no valid pair can be found
            </returns>
            <seealso cref="M:VDFramework.Utility.DataTypes.StringUtil.GetMatchingPairs(System.String,System.String,System.String)"/>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.StringUtil.GetStringsBetweenAandBRange(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get the strings between all pairs of two strings, optionally including the two strings
            </summary>
            <param name="input">The string to get the substrings from</param>
            <param name="a">The string that represents the opening of a pair</param>
            <param name="b">The string that represents the closing of a pair</param>
            <param name="startIndex">The index from where to start looking for pairs</param>
            <param name="endIndex">The index from where to stop looking for pairs</param>
            <param name="includeAandB">Whether or not <paramref name="a"/> and <paramref name="b"/> should be included in the result</param>
            <returns>
            A list of substrings of every occurance of pairs, sorted from most-nested to least-nested<br/>
            Returns an empty list if no valid pair is within the given range
            </returns>
            <seealso cref="M:VDFramework.Utility.DataTypes.StringUtil.GetMatchingPairs(System.String,System.String,System.String)"/>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.StringUtil.GetDepthAtIndex(System.String,System.Char,System.Char,System.Int32,System.Boolean)">
            <summary>
            Tests how 'deep' the given index is determined by nested pairs of <paramref name="a"/> and <paramref name="b"/>
            </summary>
            <param name="input">The string to search for pairs</param>
            <param name="a">The character that represents the opening of a pair</param>
            <param name="b">The character that represents the closing of a pair</param>
            <param name="lookupIndex">The index to check the depth (nested-ness) for</param>
            <param name="ignoreEscaped">Whether a found closing or opening match should be ignored if it is preceded by the <see cref="F:VDFramework.Utility.DataTypes.StringUtil.escapeCharacter"/></param>
            <returns>The depth of the given index<br/>0 means it is not within any pair (or no pair could be found)</returns>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.StringUtil.GetMatchingPairs(System.String,System.Char,System.Char,System.Boolean)">
            <summary>
            Find all matching pairs of <paramref name="a"/> and <paramref name="b"/>
            </summary>
            <param name="input">The string to search for pairs</param>
            <param name="a">The character that represents the opening of a pair</param>
            <param name="b">The character that represents the closing of a pair</param>
            <param name="ignoreEscaped">Whether a found closing or opening match should be ignored if it is preceded by the <see cref="F:VDFramework.Utility.DataTypes.StringUtil.escapeCharacter"/></param>
            <returns>
            A list of tuples that represent: (OpeningIndex, ClosingIndex, Depth)<br/>
            with Depth=1 meaning it is not nested within another pair
            </returns>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.StringUtil.GetFirstMatchingPair(System.String,System.Char,System.Char,System.Int32,System.Boolean)">
            <summary>
            Find the first matching pair of <paramref name="a"/> and <paramref name="b"/>
            </summary>
            <param name="input">The string to search for pairs</param>
            <param name="a">The character that represents the opening of a pair</param>
            <param name="b">The character that represents the closing of a pair</param>
            <param name="startIndex">The index from where to start searching for a matching pair in the string</param>
            <param name="ignoreEscaped">Whether a found closing or opening match should be ignored if it is preceded by the <see cref="F:VDFramework.Utility.DataTypes.StringUtil.escapeCharacter"/></param>
            <returns>
            A tuple that represents: (OpeningIndex, ClosingIndex)
            </returns>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.StringUtil.GetStringsBetweenAandB(System.String,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Get the strings between all pairs of two strings, optionally including the two strings
            </summary>
            <param name="input">The string to get the substrings from</param>
            <param name="a">The character that represents the opening of a pair</param>
            <param name="b">The character that represents the closing of a pair</param>
            <param name="includeAandB">Whether <paramref name="a"/> and <paramref name="b"/> should be included in the result</param>
            <param name="ignoreEscaped">Whether a found closing or opening match should be ignored if it is preceded by the <see cref="F:VDFramework.Utility.DataTypes.StringUtil.escapeCharacter"/></param>
            <returns>
            A list of substrings of every occurance of pairs, sorted from most-nested to least-nested<br/>
            Returns an empty list if no valid pair can be found
            </returns>
            <seealso cref="M:VDFramework.Utility.DataTypes.StringUtil.GetMatchingPairs(System.String,System.String,System.String)"/>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.StringUtil.GetStringsBetweenAandBRange(System.String,System.Char,System.Char,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Get the strings between all pairs of two strings, optionally including the two strings
            </summary>
            <param name="input">The string to get the substrings from</param>
            <param name="a">The character that represents the opening of a pair</param>
            <param name="b">The character that represents the closing of a pair</param>
            <param name="startIndex">The index from where to start looking for pairs</param>
            <param name="endIndex">The index from where to stop looking for pairs</param>
            <param name="includeAandB">Whether or not <paramref name="a"/> and <paramref name="b"/> should be included in the result</param>
            <param name="ignoreEscaped">Whether a found closing or opening match should be ignored if it is preceded by the <see cref="F:VDFramework.Utility.DataTypes.StringUtil.escapeCharacter"/></param>
            <returns>
            A list of substrings of every occurance of pairs, sorted from most-nested to least-nested<br/>
            Returns an empty list if no valid pair is within the given range
            </returns>
            <seealso cref="M:VDFramework.Utility.DataTypes.StringUtil.GetMatchingPairs(System.String,System.String,System.String)"/>
        </member>
        <member name="M:VDFramework.Utility.DataTypes.StringUtil.ReduceDepthBecauseOfInvalidOpenings(System.Collections.Generic.List{System.Tuple{System.Int32,System.Int32,System.Int32}},System.Collections.Generic.Stack{System.Int32})">
            <summary>
            Fix the invalid depth caused by unclosed openings.<br/>
            Unresolved openings (those without a fitting closer to make a pair) falsely increase the depth of the matching pairs<br/>
            This function fixes that discrepancy
            </summary>
        </member>
        <member name="M:VDFramework.Utility.EnumDictionaryUtil.PopulateEnumDictionary``3(System.Collections.Generic.List{``0})">
            <summary>
            Will add a KeyValuePair for every enumValue to the list
            </summary>
            <returns>The same list</returns>
        </member>
        <member name="T:VDFramework.Utility.RandomUtil">
            <summary>
            Utility methods to randomly get an item from a given set of objects
            </summary>
        </member>
        <member name="M:VDFramework.Utility.RandomUtil.RandomBool(VDFramework.RandomWrapper.Interface.IRandomNumberGenerator)">
            <summary>
            Returns a random bool value
            </summary>
            <param name="rng">The random number generator to use</param>
            <returns>TRUE or FALSE</returns>
        </member>
        <member name="M:VDFramework.Utility.RandomUtil.RandomBool">
            <summary>
            Returns a random bool value (using <see cref="T:System.Random">System.Random</see>)
            </summary>
            <returns>TRUE or FALSE</returns>
        </member>
        <member name="M:VDFramework.Utility.RandomUtil.GetRandom(VDFramework.RandomWrapper.Interface.IRandomNumberGenerator,System.Object[])">
            <summary>
            Returns randomly from the parameters given
            </summary>
            <param name="rng">The random number generator to use</param>
            <param name="array">The collection to randomly select an object from</param>
            <returns>Any of the given objects, randomly selected</returns>
        </member>
        <member name="M:VDFramework.Utility.RandomUtil.GetRandom``1(VDFramework.RandomWrapper.Interface.IRandomNumberGenerator,``0[])">
            <inheritdoc cref="M:VDFramework.Utility.RandomUtil.GetRandom(VDFramework.RandomWrapper.Interface.IRandomNumberGenerator,System.Object[])"/>
        </member>
        <member name="M:VDFramework.Utility.RandomUtil.GetRandom(System.Object[])">
            <summary>
            Returns randomly from the parameters given (using <see cref="T:System.Random">System.Random</see>)
            </summary>
            <param name="array">The collection to randomly select an object from</param>
            <returns>Any of the given objects, randomly selected</returns>
        </member>
        <member name="M:VDFramework.Utility.RandomUtil.GetRandom``1(``0[])">
            <inheritdoc cref="M:VDFramework.Utility.RandomUtil.GetRandom(System.Object[])"/>
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle">
            <summary>
            <para>An abstract representation of a timer which invokes an event after a certain amount of seconds pass (possibly loops)</para>
            <para>This can be used to Pause the timer or change properties</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.OnHandleFinished">
            <summary>
            Used internally by the <see cref="T:VDFramework.Utility.TimerUtil.TimerManager"/> to remove this Handle from the update list when <see cref="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.Stop"/> is invoked
            </summary>
            <seealso cref="F:VDFramework.Utility.TimerUtil.TimerManager.timers"/>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.CurrentTime">
            <summary>
            The amount of seconds remaining until the callback invokes
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.CurrentTimeNormalized">
            <summary>
            A value of [0,1] that represents the % between 0 and the startTime of the timer
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.StartTime">
            <summary>
            The amount of seconds that the timer started with (will be reset to this value when the timer loops)
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.IsLooping">
            <summary>
            Whether or not the timer should reset itself upon expiring
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.IsPaused">
            <summary>
            If a timer is paused the internal timer will not be updated
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.IsTicking">
            <summary>
            <para>Whether or not this handle represents an active timer (i.e. started by the <see cref="T:VDFramework.Utility.TimerUtil.TimerManager"/>)</para>
            <para>This will also return true if a timer is started by the <see cref="T:VDFramework.Utility.TimerUtil.TimerManager"/> but has been paused</para>
            </summary>
            <seealso cref="P:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.IsPaused"/>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.#ctor(System.Double,System.Boolean)">
            <summary>
            A handle to the timer, this can be used to Pause the timer or change some properties
            </summary>
            <param name="startTime">The time in seconds after which the callback will be invoked</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.ResetTimer">
            <summary>
            Reset the internal timer immediately to <see cref="P:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.StartTime"/>
            </summary>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.SetLoop(System.Boolean)">
            <summary>
            Set whether or not the timer should loop after expiring
            </summary>
            <param name="loop">Should the timer loop after expiring?</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.SetStartTime(System.Double,System.Boolean)">
            <summary>
            Set the <see cref="P:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.StartTime"/> of the timer
            <para>This will only have an effect if the timer is reset or loops</para>
            </summary>
            <param name="newStartTime">The new start time for the timer</param>
            <param name="resetTimer">Whether the timer should reset after setting the new start time</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.SetPause(System.Boolean)">
            <summary>
            Pause the timer to temporarily prevent updating the internal timer
            </summary>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.Stop">
            <summary>
            Stop this timer immediately and prevent further updates
            <para>If you mean to temporarily pause a timer, use <see cref="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.SetPause(System.Boolean)"/> instead</para>
            </summary>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.Cleanup">
            <summary>
            Called when the timer is stopped
            </summary>
            <seealso cref="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.Stop"/>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.InvokeCallback">
            <summary>
            <para>Invoke the callback</para>
            <para>Called when the timer expires</para>
            </summary>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.SetCallbackToNull">
            <summary>
            <para>Set the callback to null to remove all references it may hold</para>
            <para>Called when the timer expires for a non-looping handle</para>
            </summary>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.CompareTo(VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle)">
            <summary>
            Compare using the StartTime
            <para>(uses CurrentTime if equal)</para>
            </summary>
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle`1">
            <summary>
            A version of <see cref="T:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle"/> that implements a property for the Callback
            </summary>
            <typeparam name="TDelegate">Any delegate type (e.g. Action)</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle`1.OnTimerExpire">
            <summary>
            The callback to invoke when the timer expires, setting this to null will stop the timer
            </summary>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle`1.SetCallbackToNull">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle`1.#ctor(System.Double,`0,System.Boolean)">
            <inheritdoc />
            <param name="startTime">The time in seconds after which the callback will be invoked</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callback">The callback that will be invoked after the timer expires</param>
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.AbstractParametersTimerHandle`1">
            <summary>
            An abstract TimerHandle that has additional methods specifically aimed at parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.AbstractParametersTimerHandle`1.ParameterCount">
            <summary>
            Get the amount of parameters of the callback that will be invoked when the timer expires
            </summary>
            <returns>The amount of parameters of the callback function</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.AbstractParametersTimerHandle`1.#ctor(System.Double,`0,System.Boolean)">
            <summary>
            An abstract TimerHandle that has additional methods specifically aimed at parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.AbstractParametersTimerHandle`1.#ctor(System.Double,`0,System.Boolean,System.Object[])">
            <summary>
            An abstract TimerHandle that has additional methods specifically aimed at parameters
            </summary>
            <param name="startTime">The time in seconds after which the callback will be invoked</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callback">The callback that will be invoked after the timer expires</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.AbstractParametersTimerHandle`1.GetParameters">
            <summary>
            Get the currently set parameters of this TimerHandle
            </summary>
            <returns>The parameters that will be used to invoke the callback</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.AbstractParametersTimerHandle`1.GetParameter(System.Int32)">
            <summary>
            Return the parameter at the specified index
            </summary>
            <param name="parameterIndex">The index of the parameter (zero-indexed)</param>
            <returns>The boxed parameter</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.AbstractParametersTimerHandle`1.SetParameters(System.Object[])">
            <summary>
            <para>Set parameters that will be used to invoke the callback</para>
            <para>Setting this to more than the <see cref="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.AbstractParametersTimerHandle`1.ParameterCount"/> will not cause an out of bounds exception because any excess will be ignored</para>
            <para>Setting this to less than the <see cref="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.AbstractParametersTimerHandle`1.ParameterCount"/> will only change the parameters up to callbackParameters.Length</para>
            </summary>
            <param name="callbackParameters">The new parameters to be used for invoking the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.AbstractParametersTimerHandle`1.SetParameter(System.Int32,System.Object)">
            <summary>
            Set the respective parameter to the given value
            </summary>
            <param name="parameterIndex">The index of the parameter (zero-indexed)</param>
            <param name="parameterValue">the new value of the parameter</param>
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.DelegateTimerHandle">
            <summary>
            <para>A Handle for a timer that has a callback that has any number of parameters (depends on the given callback)</para>
            <para>While the Delegate supports any amount of parameters it is encouraged to use another option because <see cref="M:System.Delegate.DynamicInvoke(System.Object[])"/> and the boxing-unboxing of parameters is very slow</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.DelegateTimerHandle.parameters">
            <summary>
            All the parameters as an array of objects
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.DelegateTimerHandle.OnTimerExpire">
            <inheritdoc />
            <seealso cref="M:System.Delegate.DynamicInvoke(System.Object[])"/>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.DelegateTimerHandle.ParameterCount">
            <summary>
            Get the amount of parameters that the callback of this TimerHandle can take
            </summary>
            <returns>The amount of parameters of the callback function</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.DelegateTimerHandle.#ctor(System.Double,System.Delegate,System.Boolean,System.Object[])">
            <summary>
            <para>A Handle for a timer that has a callback that has any number of parameters (depends on the given callback)</para>
            <para>While the Delegate supports any amount of parameters it is encouraged to use another option because <see cref="M:System.Delegate.DynamicInvoke(System.Object[])"/> and the boxing-unboxing of parameters is very slow</para>
            </summary>
            <param name="startTime">The time in seconds after which the callback will be invoked</param>
            <param name="callback">The callback that will be invoked after the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.DelegateTimerHandle.GetParameters">
            <inheritdoc />
            <Warning>This array is not a copy, changing the elements changes the actual parameters of the TimerHandle</Warning>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.DelegateTimerHandle.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.DelegateTimerHandle.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.DelegateTimerHandle.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.DelegateTimerHandle.ResizeParameterArray">
            <summary>
            Will setup the parameter object[] to match the parameter count of the current delegate, will reuse any existing parameter array if it exists
            </summary>
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`1">
            <summary>
            A Handle for a timer that has a callback that has 1 parameter
            </summary>
            <typeparam name="TParam1">The type of the parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`1.Param1">
            <summary>
            The parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`1.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`1.#ctor(System.Double,System.Action{`0},System.Boolean,`0)">
            <summary>
            A Handle for a timer that has a callback that has 1 parameter
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`1.#ctor(System.Double,System.Action{`0},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 1 parameter
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`1.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`1.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`1.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`2">
            <summary>
            A Handle for a timer that has a callback that has 2 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`2.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`2.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`2.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`2.#ctor(System.Double,System.Action{`0,`1},System.Boolean,`0,`1)">
            <summary>
            A Handle for a timer that has a callback that has 2 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`2.#ctor(System.Double,System.Action{`0,`1},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 2 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`2.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`2.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`2.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`3">
            <summary>
            A Handle for a timer that has a callback that has 3 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`3.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`3.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`3.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`3.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`3.#ctor(System.Double,System.Action{`0,`1,`2},System.Boolean,`0,`1,`2)">
            <summary>
            A Handle for a timer that has a callback that has 3 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`3.#ctor(System.Double,System.Action{`0,`1,`2},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 3 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`3.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`3.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`3.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`4">
            <summary>
            A Handle for a timer that has a callback that has 4 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`4.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`4.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`4.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`4.Param4">
            <summary>
            The fourth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`4.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`4.#ctor(System.Double,System.Action{`0,`1,`2,`3},System.Boolean,`0,`1,`2,`3)">
            <summary>
            A Handle for a timer that has a callback that has 4 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`4.#ctor(System.Double,System.Action{`0,`1,`2,`3},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 4 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`4.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`4.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`4.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`5">
            <summary>
            A Handle for a timer that has a callback that has 5 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`5.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`5.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`5.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`5.Param4">
            <summary>
            The fourth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`5.Param5">
            <summary>
            The fifth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`5.ParameterCount">
            <summary>
            A Handle for a timer that has a callback that has no parameters
            </summary>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`5.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4},System.Boolean,`0,`1,`2,`3,`4)">
            <summary>
            A Handle for a timer that has a callback that has 5 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`5.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 5 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`5.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`5.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`5.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`6">
            <summary>
            A Handle for a timer that has a callback that has 6 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`6.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`6.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`6.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`6.Param4">
            <summary>
            The fourth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`6.Param5">
            <summary>
            The fifth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`6.Param6">
            <summary>
            The sixth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`6.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`6.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5},System.Boolean,`0,`1,`2,`3,`4,`5)">
            <summary>
            A Handle for a timer that has a callback that has 6 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`6.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 6 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`6.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`6.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`6.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7">
            <summary>
            A Handle for a timer that has a callback that has 7 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7.Param4">
            <summary>
            The fourth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7.Param5">
            <summary>
            The fifth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7.Param6">
            <summary>
            The sixth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7.Param7">
            <summary>
            The seventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6},System.Boolean,`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            A Handle for a timer that has a callback that has 7 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 7 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`7.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8">
            <summary>
            A Handle for a timer that has a callback that has 8 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.Param4">
            <summary>
            The fourth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.Param5">
            <summary>
            The fifth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.Param6">
            <summary>
            The sixth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.Param7">
            <summary>
            The seventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.Param8">
            <summary>
            The eighth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7},System.Boolean,`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            A Handle for a timer that has a callback that has 8 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 8 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`8.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9">
            <summary>
            A Handle for a timer that has a callback that has 9 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.Param4">
            <summary>
            The fourth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.Param5">
            <summary>
            The fifth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.Param6">
            <summary>
            The sixth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.Param7">
            <summary>
            The seventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.Param8">
            <summary>
            The eighth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.Param9">
            <summary>
            The ninth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8},System.Boolean,`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            A Handle for a timer that has a callback that has 9 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 9 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`9.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10">
            <summary>
            A Handle for a timer that has a callback that has 10 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.Param4">
            <summary>
            The fourth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.Param5">
            <summary>
            The fifth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.Param6">
            <summary>
            The sixth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.Param7">
            <summary>
            The seventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.Param8">
            <summary>
            The eighth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.Param9">
            <summary>
            The ninth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.Param10">
            <summary>
            The tenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9},System.Boolean,`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            A Handle for a timer that has a callback that has 10 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <param name="param10">The tenth parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 10 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`10.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11">
            <summary>
            A Handle for a timer that has a callback that has 11 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
            <typeparam name="TParam11">The type of the eleventh parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.Param4">
            <summary>
            The fourth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.Param5">
            <summary>
            The fifth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.Param6">
            <summary>
            The sixth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.Param7">
            <summary>
            The seventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.Param8">
            <summary>
            The eighth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.Param9">
            <summary>
            The ninth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.Param10">
            <summary>
            The tenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.Param11">
            <summary>
            The eleventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10},System.Boolean,`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
            <summary>
            A Handle for a timer that has a callback that has 11 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <param name="param10">The tenth parameter that is used to invoke the callback</param>
            <param name="param11">The eleventh parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 11 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`11.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12">
            <summary>
            A Handle for a timer that has a callback that has 12 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
            <typeparam name="TParam11">The type of the eleventh parameter</typeparam>
            <typeparam name="TParam12">The type of the twelfth parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.Param4">
            <summary>
            The fourth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.Param5">
            <summary>
            The fifth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.Param6">
            <summary>
            The sixth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.Param7">
            <summary>
            The seventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.Param8">
            <summary>
            The eighth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.Param9">
            <summary>
            The ninth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.Param10">
            <summary>
            The tenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.Param11">
            <summary>
            The eleventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.Param12">
            <summary>
            The twelfth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11},System.Boolean,`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)">
            <summary>
            A Handle for a timer that has a callback that has 12 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <param name="param10">The tenth parameter that is used to invoke the callback</param>
            <param name="param11">The eleventh parameter that is used to invoke the callback</param>
            <param name="param12">The twelfth parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 12 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`12.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13">
            <summary>
            A Handle for a timer that has a callback that has 13 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
            <typeparam name="TParam11">The type of the eleventh parameter</typeparam>
            <typeparam name="TParam12">The type of the twelfth parameter</typeparam>
            <typeparam name="TParam13">The type of the thirteenth parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.Param4">
            <summary>
            The fourth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.Param5">
            <summary>
            The fifth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.Param6">
            <summary>
            The sixth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.Param7">
            <summary>
            The seventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.Param8">
            <summary>
            The eighth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.Param9">
            <summary>
            The ninth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.Param10">
            <summary>
            The tenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.Param11">
            <summary>
            The eleventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.Param12">
            <summary>
            The twelfth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.Param13">
            <summary>
            The thirteenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12},System.Boolean,`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)">
            <summary>
            A Handle for a timer that has a callback that has 13 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <param name="param10">The tenth parameter that is used to invoke the callback</param>
            <param name="param11">The eleventh parameter that is used to invoke the callback</param>
            <param name="param12">The twelfth parameter that is used to invoke the callback</param>
            <param name="param13">The thirteenth parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 13 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`13.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14">
            <summary>
            A Handle for a timer that has a callback that has 14 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
            <typeparam name="TParam11">The type of the eleventh parameter</typeparam>
            <typeparam name="TParam12">The type of the twelfth parameter</typeparam>
            <typeparam name="TParam13">The type of the thirteenth parameter</typeparam>
            <typeparam name="TParam14">The type of the fourteenth parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param4">
            <summary>
            The fourth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param5">
            <summary>
            The fifth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param6">
            <summary>
            The sixth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param7">
            <summary>
            The seventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param8">
            <summary>
            The eighth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param9">
            <summary>
            The ninth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param10">
            <summary>
            The tenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param11">
            <summary>
            The eleventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param12">
            <summary>
            The twelfth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param13">
            <summary>
            The thirteenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.Param14">
            <summary>
            The fourteenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13},System.Boolean,`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)">
            <summary>
            A Handle for a timer that has a callback that has 14 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 14 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`14.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15">
            <summary>
            A Handle for a timer that has a callback that has 15 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
            <typeparam name="TParam11">The type of the eleventh parameter</typeparam>
            <typeparam name="TParam12">The type of the twelfth parameter</typeparam>
            <typeparam name="TParam13">The type of the thirteenth parameter</typeparam>
            <typeparam name="TParam14">The type of the fourteenth parameter</typeparam>
            <typeparam name="TParam15">The type of the fifteenth parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param4">
            <summary>
            The fourth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param5">
            <summary>
            The fifth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param6">
            <summary>
            The sixth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param7">
            <summary>
            The seventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param8">
            <summary>
            The eighth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param9">
            <summary>
            The ninth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param10">
            <summary>
            The tenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param11">
            <summary>
            The eleventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param12">
            <summary>
            The twelfth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param13">
            <summary>
            The thirteenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param14">
            <summary>
            The fourteenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.Param15">
            <summary>
            The fifteenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14},System.Boolean,`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)">
            <summary>
            A Handle for a timer that has a callback that has 15 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <param name="param10">The tenth parameter that is used to invoke the callback</param>
            <param name="param11">The eleventh parameter that is used to invoke the callback</param>
            <param name="param12">The twelfth parameter that is used to invoke the callback</param>
            <param name="param13">The thirteenth parameter that is used to invoke the callback</param>
            <param name="param14">The fourteenth parameter that is used to invoke the callback</param>
            <param name="param15">The fifteenth parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 15 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`15.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16">
            <summary>
            A Handle for a timer that has a callback that has 16 parameters
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
            <typeparam name="TParam11">The type of the eleventh parameter</typeparam>
            <typeparam name="TParam12">The type of the twelfth parameter</typeparam>
            <typeparam name="TParam13">The type of the thirteenth parameter</typeparam>
            <typeparam name="TParam14">The type of the fourteenth parameter</typeparam>
            <typeparam name="TParam15">The type of the fifteenth parameter</typeparam>
            <typeparam name="TParam16">The type of the sixteenth parameter</typeparam>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param1">
            <summary>
            The first parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param2">
            <summary>
            The second parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param3">
            <summary>
            The third parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param4">
            <summary>
            The fourth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param5">
            <summary>
            The fifth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param6">
            <summary>
            The sixth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param7">
            <summary>
            The seventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param8">
            <summary>
            The eighth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param9">
            <summary>
            The ninth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param10">
            <summary>
            The tenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param11">
            <summary>
            The eleventh parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param12">
            <summary>
            The twelfth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param13">
            <summary>
            The thirteenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param14">
            <summary>
            The fourteenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param15">
            <summary>
            The fifteenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.Param16">
            <summary>
            The sixteenth parameter that is used to invoke the callback
            </summary>
        </member>
        <member name="P:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.ParameterCount">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15},System.Boolean,`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15)">
            <summary>
            A Handle for a timer that has a callback that has 16 parameters
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="callback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <param name="param10">The tenth parameter that is used to invoke the callback</param>
            <param name="param11">The eleventh parameter that is used to invoke the callback</param>
            <param name="param12">The twelfth parameter that is used to invoke the callback</param>
            <param name="param13">The thirteenth parameter that is used to invoke the callback</param>
            <param name="param14">The fourteenth parameter that is used to invoke the callback</param>
            <param name="param15">The fifteenth parameter that is used to invoke the callback</param>
            <param name="param16">The sixteenth parameter that is used to invoke the callback</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.#ctor(System.Double,System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15},System.Boolean,System.Object[])">
            <summary>
            A Handle for a timer that has a callback that has 16 parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.SetParameter(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler`16.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerHandles.TimerHandle">
            <summary>
            A Handle for a timer that has a callback that has no parameters
            </summary>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.TimerHandle.#ctor(System.Double,System.Action,System.Boolean)">
            <summary>
            A Handle for a timer that has a callback that has no parameters
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerHandles.TimerHandle.InvokeCallback">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.Utility.TimerUtil.TimerManager">
            <summary>
            <para>Manager class for all timers</para>
            <para>use <see cref="M:VDFramework.Utility.TimerUtil.TimerManager.Update(System.Double)"/> to update all timers</para>
            <para>The timers are updated in reversed order so the last one started will be updated first</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.TimerUtil.TimerManager.timers">
            <summary>
            A collection of <see cref="T:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle"/> whose time will be updated in <see cref="M:VDFramework.Utility.TimerUtil.TimerManager.Update(System.Double)"/>
            </summary>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer(System.Double,System.Action,System.Boolean)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerDelegate(System.Double,System.Delegate,System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
            <seealso cref="M:System.Delegate.DynamicInvoke(System.Object[])"/>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer(VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle)">
            <summary>
            Start a timer on the given TimerHandle and resets the timer (only resets it is already ticking)
            </summary>
            <param name="handle">The TimerHandle to set the timer on</param>
            <returns>The same timerhandle</returns>
            <seealso cref="P:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle.IsTicking"/>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``1(VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle,``0)">
            <summary>
            <para>Starts a new timer using the data from the given TimerHandle</para>
            <para>use <see cref="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``1(VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle{``0})"/> if you want to reuse the callback from the given handle</para>
            </summary>
            <param name="handle">A TimerHandle whose data will be used to set a new timer</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``1(VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle{``0})">
            <summary>
            <para>Starts a new timer using the data from the given TimerHandle</para>
            </summary>
            <param name="handle">A TimerHandle whose data will be used to set a new timer</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.AddHandleToUpdateList(VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle)">
            <summary>
            Adds this timerHandle to the list of TimerHandles
            </summary>
            <param name="handle">The TimerHandle that will be added</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.Update(System.Double)">
            <summary>
            Updates the internal timer of each <see cref="T:VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle"/> with deltaTime
            </summary>
            <param name="deltaTime">The amount to update the timers with</param>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``1(System.Double,System.Action{``0},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``1(System.Double,System.Action{``0},System.Boolean,``0)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``2(System.Double,System.Action{``0,``1},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``2(System.Double,System.Action{``0,``1},System.Boolean,``0,``1)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``3(System.Double,System.Action{``0,``1,``2},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``3(System.Double,System.Action{``0,``1,``2},System.Boolean,``0,``1,``2)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``4(System.Double,System.Action{``0,``1,``2,``3},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``4(System.Double,System.Action{``0,``1,``2,``3},System.Boolean,``0,``1,``2,``3)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``5(System.Double,System.Action{``0,``1,``2,``3,``4},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``5(System.Double,System.Action{``0,``1,``2,``3,``4},System.Boolean,``0,``1,``2,``3,``4)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``6(System.Double,System.Action{``0,``1,``2,``3,``4,``5},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``6(System.Double,System.Action{``0,``1,``2,``3,``4,``5},System.Boolean,``0,``1,``2,``3,``4,``5)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``7(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``7(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6},System.Boolean,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``8(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``8(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Boolean,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``9(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``9(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Boolean,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``10(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``10(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Boolean,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <param name="param10">The tenth parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``11(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``11(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Boolean,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <param name="param10">The tenth parameter that is used to invoke the callback</param>
            <param name="param11">The eleventh parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``12(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``12(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Boolean,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <param name="param10">The tenth parameter that is used to invoke the callback</param>
            <param name="param11">The eleventh parameter that is used to invoke the callback</param>
            <param name="param12">The twelfth parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``13(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``13(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Boolean,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <param name="param10">The tenth parameter that is used to invoke the callback</param>
            <param name="param11">The eleventh parameter that is used to invoke the callback</param>
            <param name="param12">The twelfth parameter that is used to invoke the callback</param>
            <param name="param13">The thirteenth parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``14(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``14(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Boolean,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <param name="param10">The tenth parameter that is used to invoke the callback</param>
            <param name="param11">The eleventh parameter that is used to invoke the callback</param>
            <param name="param12">The twelfth parameter that is used to invoke the callback</param>
            <param name="param13">The thirteenth parameter that is used to invoke the callback</param>
            <param name="param14">The fourteenth parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``15(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``15(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Boolean,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <param name="param10">The tenth parameter that is used to invoke the callback</param>
            <param name="param11">The eleventh parameter that is used to invoke the callback</param>
            <param name="param12">The twelfth parameter that is used to invoke the callback</param>
            <param name="param13">The thirteenth parameter that is used to invoke the callback</param>
            <param name="param14">The fourteenth parameter that is used to invoke the callback</param>
            <param name="param15">The fifteenth parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``16(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Boolean,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="param1">The first parameter that is used to invoke the callback</param>
            <param name="param2">The second parameter that is used to invoke the callback</param>
            <param name="param3">The third parameter that is used to invoke the callback</param>
            <param name="param4">The fourth parameter that is used to invoke the callback</param>
            <param name="param5">The fifth parameter that is used to invoke the callback</param>
            <param name="param6">The sixth parameter that is used to invoke the callback</param>
            <param name="param7">The seventh parameter that is used to invoke the callback</param>
            <param name="param8">The eighth parameter that is used to invoke the callback</param>
            <param name="param9">The ninth parameter that is used to invoke the callback</param>
            <param name="param10">The tenth parameter that is used to invoke the callback</param>
            <param name="param11">The eleventh parameter that is used to invoke the callback</param>
            <param name="param12">The twelfth parameter that is used to invoke the callback</param>
            <param name="param13">The thirteenth parameter that is used to invoke the callback</param>
            <param name="param14">The fourteenth parameter that is used to invoke the callback</param>
            <param name="param15">The fifteenth parameter that is used to invoke the callback</param>
            <param name="param16">The sixteenth parameter that is used to invoke the callback</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimer``16(System.Double,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Boolean,System.Object[])">
            <summary>
            Start a new timer
            </summary>
            <param name="startTime">The time in seconds after which the callBack will be called</param>
            <param name="timerExpiredCallback">The callback to invoke once the timer expires</param>
            <param name="loop">Whether this timer should loop (restart once it ends)</param>
            <param name="callbackParameters">Parameters that will be used to invoke the callback, any undefined parameters will be their default value and any excess will be ignored</param>
            <returns>A handle to the timer, this can be used to pause the timer or change properties
            <para>It can also be safely ignored if not needed</para></returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate(VDFramework.Utility.TimerUtil.TimerHandles.AbstractTimerHandle{System.Action})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <returns>A new TimerHandle</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``1(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``2(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``3(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``4(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2,``3})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``5(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2,``3,``4})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``6(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2,``3,``4,``5})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``7(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``8(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``9(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``10(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``11(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
            <typeparam name="TParam11">The type of the eleventh parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``12(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
            <typeparam name="TParam11">The type of the eleventh parameter</typeparam>
            <typeparam name="TParam12">The type of the twelfth parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``13(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
            <typeparam name="TParam11">The type of the eleventh parameter</typeparam>
            <typeparam name="TParam12">The type of the twelfth parameter</typeparam>
            <typeparam name="TParam13">The type of the thirteenth parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``14(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
            <typeparam name="TParam11">The type of the eleventh parameter</typeparam>
            <typeparam name="TParam12">The type of the twelfth parameter</typeparam>
            <typeparam name="TParam13">The type of the thirteenth parameter</typeparam>
            <typeparam name="TParam14">The type of the fourteenth parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``15(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
            <typeparam name="TParam11">The type of the eleventh parameter</typeparam>
            <typeparam name="TParam12">The type of the twelfth parameter</typeparam>
            <typeparam name="TParam13">The type of the thirteenth parameter</typeparam>
            <typeparam name="TParam14">The type of the fourteenth parameter</typeparam>
            <typeparam name="TParam15">The type of the fifteenth parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="M:VDFramework.Utility.TimerUtil.TimerManager.StartNewTimerFromTemplate``16(VDFramework.Utility.TimerUtil.TimerHandles.Parameters.ParameterTimerHandler{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Starts a new timer using the data from the given TimerHandle
            </summary>
            <typeparam name="TParam1">The type of the first parameter</typeparam>
            <typeparam name="TParam2">The type of the second parameter</typeparam>
            <typeparam name="TParam3">The type of the third parameter</typeparam>
            <typeparam name="TParam4">The type of the fourth parameter</typeparam>
            <typeparam name="TParam5">The type of the fifth parameter</typeparam>
            <typeparam name="TParam6">The type of the sixth parameter</typeparam>
            <typeparam name="TParam7">The type of the seventh parameter</typeparam>
            <typeparam name="TParam8">The type of the eighth parameter</typeparam>
            <typeparam name="TParam9">The type of the ninth parameter</typeparam>
            <typeparam name="TParam10">The type of the tenth parameter</typeparam>
            <typeparam name="TParam11">The type of the eleventh parameter</typeparam>
            <typeparam name="TParam12">The type of the twelfth parameter</typeparam>
            <typeparam name="TParam13">The type of the thirteenth parameter</typeparam>
            <typeparam name="TParam14">The type of the fourteenth parameter</typeparam>
            <typeparam name="TParam15">The type of the fifteenth parameter</typeparam>
            <typeparam name="TParam16">The type of the sixteenth parameter</typeparam>
            <returns>A new ParameterTimerHandler with the given parameters</returns>
        </member>
        <member name="T:VDFramework.Utility.Unsafe.UnsafeUtil">
            <summary>
            Contains utility methods for working with unsafe code
            </summary>
        </member>
        <member name="M:VDFramework.Utility.Unsafe.UnsafeUtil.reinterpret_cast``2(``0)">
            <summary>
            Reinterpret the bits from one type as if it were another
            </summary>
        </member>
        <member name="T:VDFramework.Utility.Windows.EnvironmentVariables">
            <summary>
            An Utility class to easily access some environment variables
            </summary>
        </member>
        <member name="P:VDFramework.Utility.Windows.SpecialFolder.DefaultPath">
            <summary>
            Returns the default path for the folder
            </summary>
        </member>
        <member name="P:VDFramework.Utility.Windows.SpecialFolder.Path">
            <summary>
            Get the current path to the folder
            </summary>
            <exception cref="T:System.IO.DirectoryNotFoundException">Throws if there is no valid path to the folder</exception>
        </member>
        <member name="P:VDFramework.Utility.Windows.SpecialFolder.CSIDL">
            <summary>
            constant special item ID list
            <para>(Only applicable before Windows Vista)</para>
            <para>https://docs.microsoft.com/en-us/windows/win32/shell/csidl</para>
            </summary>
        </member>
        <member name="T:VDFramework.Utility.Windows.SpecialFolders">
            <summary>
            An utility class to easily access information about the special folders
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.AddNewPrograms">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.AppdataDesktop">
            <summary>
            Used internally by .NET applications to enable cross-platform app functionality. It is not intended to be used directly from an application.
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.AppdataDocuments">
            <summary>
            Used internally by .NET applications to enable cross-platform app functionality. It is not intended to be used directly from an application.
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.AppDataFavorites">
            <summary>
            Used internally by .NET applications to enable cross-platform app functionality. It is not intended to be used directly from an application.
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.AppDataProgramData">
            <summary>
            Used internally by .NET applications to enable cross-platform app functionality. It is not intended to be used directly from an application.
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.AppsFolder">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.AppUpdates">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.ChangeRemovePrograms">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.ComputerFolder">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.ConflictFolder">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.ConnectionsFolder">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.ControlPanelFolder">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.Downloads">
            <summary>
            The default folder where downloaded files are stored.
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.Games">
             <summary>
            <para>Deprecated in Windows 10, version 1803 and later versions. In these versions, it returns 0x80070057 - E_INVALIDARG</para>
             <para>VIRTUAL FOLDER: no path available</para>
             </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.HomeGroup">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.HomeGroupCurrentUser">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.InternetFolder">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.Libraries">
            <summary>
            The folder where libraries like 'Videos', 'Images', 'Documents', 'Music' etc. are stored.
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.NetworkFolder">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.PrintersFolder">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.ProgramFilesX64">
            <summary>
            Not supported on 32-bit operating systems. It also is not supported for 32-bit applications running on 64-bit operating systems.
            Attempting to use FOLDERID_ProgramFilesX64 in either situation results in an error.
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.RecycleBinFolder">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.SEARCH_CSC">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.SearchHome">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.SEARCH_MAPI">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.SkyDrive">
            <summary>
            OneDrive
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.SkyDriveCameraRoll">
            <summary>
            OneDrive Camera Roll
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.SkyDriveDocuments">
            <summary>
            OneDrive Documents
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.SkyDrivePictures">
            <summary>
            OneDrive Pictures
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.SyncManagerFolder">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.SyncResultsFolder">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.SyncSetupFolder">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.System">
            <summary>
            System32
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.UsersFiles">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="F:VDFramework.Utility.Windows.SpecialFolders.UsersLibraries">
            <summary>
            <para>VIRTUAL FOLDER: no path available</para>
            </summary>
        </member>
        <member name="T:VDFramework.EventSystem.EventHandler`1">
            <summary>
            Wrapper class for a <see cref="T:VDFramework.ObserverPattern.CallbackHandler"/> that uses a callback that takes an eventInstance as parameter
            </summary>
            <typeparam name="TEvent">The type of the event</typeparam>
        </member>
        <member name="T:VDFramework.EventSystem.EventManager">
            <summary>
            The manager class for the global event system, use this class to add and remove listeners from events and to raise an event
            </summary>
            <seealso cref="M:VDFramework.EventSystem.EventManager.AddListener``1(System.Action,System.Int32)"/>
            <seealso cref="M:VDFramework.EventSystem.EventManager.RemoveListener``1(System.Action)"/>
            <seealso cref="M:VDFramework.EventSystem.EventManager.RaiseEvent``1(``0)"/>
        </member>
        <member name="T:VDFramework.EventSystem.VDEvent`1">
            <summary>
            An abstract representation of a global event that provides an easier way to add/remove listeners 
            </summary>
        </member>
        <member name="E:VDFramework.EventSystem.VDEvent`1.Listeners">
            <summary>
            The listeners to this global event that take in an instance of this event as a parameter
            </summary>
        </member>
        <member name="E:VDFramework.EventSystem.VDEvent`1.ParameterlessListeners">
            <summary>
            The listeners to this global event that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.EventSystem.VDEvent`1.AddListener(System.Action{`0},System.Int32)">
            <summary>
            A shortcut to add a listener with a given priority to this event
            </summary>
            <param name="handler">The function that will be invoked when this event is raised</param>
            <param name="priorityOrder">Higher priority will be invoked over lower priority</param>
        </member>
        <member name="M:VDFramework.EventSystem.VDEvent`1.AddListener(System.Action,System.Int32)">
            <summary>
            A shortcut to add a listener with a given priority to this event
            </summary>
            <param name="handler">The function that will be invoked when this event is raised</param>
            <param name="priorityOrder">Higher priority will be invoked over lower priority</param>
        </member>
        <member name="M:VDFramework.EventSystem.VDEvent`1.RemoveListener(System.Action{`0})">
            <summary>
            A shortcut to remove a listener from this event
            </summary>
        </member>
        <member name="M:VDFramework.EventSystem.VDEvent`1.RemoveListener(System.Action)">
            <summary>
            A shortcut to remove a listener from this event
            </summary>
        </member>
        <member name="T:VDFramework.EventSystem.VDEvent">
            <summary>
            An abstract representation of a global event
            </summary>
        </member>
        <member name="P:VDFramework.EventSystem.VDEvent.Consumed">
            <summary>
            If an event is consumed it will invoke no more listeners
            </summary>
        </member>
        <member name="M:VDFramework.EventSystem.VDEvent.Consume">
            <summary>
            Consume this event and prevent any additional listeners from being invoked
            </summary>
        </member>
        <member name="T:VDFramework.Exceptions.SingletonViolationException">
            <summary>
            The exception that is thrown once you create a 2nd instance of a singleton
            </summary>
        </member>
        <member name="T:VDFramework.Extensions.EnumerableExtensions">
            <summary>
            Contains Extension methods for IEnumerables
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.EnumerableExtensions.CountIsZeroOrOne``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            True if this collection is empty or contains only one element
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.EnumerableExtensions.GetMinMax``1(System.Collections.Generic.IEnumerable{``0},``0@,``0@)">
            <summary>
            Calculate the Min and the Max values in the collection using <see cref="M:System.IComparable`1.CompareTo(`0)"/>
            </summary>
            <param name="collection">The collection to calculate the Min and Max against</param>
            <param name="minElement">The element in the collection that precedes all other elements in the sort order</param>
            <param name="maxElement">The element in the collection that follows all other elements in the sort order</param>
            <returns>A value indicating whether calculating the Min and Max was successful</returns>
        </member>
        <member name="T:VDFramework.Extensions.EnumExtensions">
            <summary>
            Contains extension methods for <see cref="T:System.Enum"/>
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.EnumExtensions.GetNames``1(``0)">
            <summary>
            Returns an IEnumerable that contains the names of every value of this enum
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.EnumExtensions.GetValues``1(``0)">
            <summary>
            Returns an IEnumerable of <typeparamref name="TEnum"/> that has all the values of the enum
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.EnumExtensions.GetRandomValue``1(``0)">
            <summary>
            Returns a random value of this enum
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.EnumExtensions.HasAnyFlag``1(``0,``0)">
            <summary>Determines whether any of the given flags are set in the current instance</summary>
            <param name="enum">The enumeration value to check for flags</param>
            <param name="flag">An enumeration value</param>
            <returns>
            <see langword="true"/> if any bit fields that are set in <paramref name="flag" /> are also set in the current instance; otherwise, <see langword="false" />.
            </returns>
            <info>Differs from <see cref="M:System.Enum.HasFlag(System.Enum)"/> in that <see cref="M:System.Enum.HasFlag(System.Enum)"/> requires that every flag is set to return <see langword="true"/></info>
        </member>
        <member name="T:VDFramework.Extensions.FloatingPointExtensions">
            <summary>
            Contains extension methods for floating-point numbers
            </summary>
            <seealso cref="T:System.Single"/>
            <seealso cref="T:System.Double"/>
            <seealso cref="T:System.Decimal"/>
        </member>
        <member name="M:VDFramework.Extensions.FloatingPointExtensions.GetDecimalCount(System.Single)">
            <summary>
            Get the amount of decimals after the decimal seperator
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.FloatingPointExtensions.GetDecimalCount(System.Double)">
            <summary>
            Get the amount of decimals after the decimal seperator
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.FloatingPointExtensions.GetDecimalCount(System.Decimal)">
            <summary>
            Get the amount of decimals after the decimal seperator
            </summary>
        </member>
        <member name="T:VDFramework.Extensions.Int32Extensions">
            <summary>
            Contains extension methods for 32-bit integers (<see cref="T:System.Int32"/>)
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.Int32Extensions.HasAtLeastOneMatchingBit(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Check every bit one by one to see if they are equal
            </summary>
            <returns>TRUE if at least one bit is equal</returns>
        </member>
        <member name="M:VDFramework.Extensions.Int32Extensions.AddFlag(System.Int32@,System.Int32)">
            <summary>
            Add the given bitflag to this value
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.Int32Extensions.RemoveFlag(System.Int32@,System.Int32)">
            <summary>
            Remove the given bitflag from this value
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.Int32Extensions.Ordinalize(System.Int32)">
            <summary>
            <para>Returns the ordinal version of this number</para>
            <para>Only supports 0-16 at the moment, higher than that will return number.ToString</para>
            </summary>
            <param name="number">The number to ordinalise</param>
            <returns>A string that respresents the ordinal version of the given number (e.g. 3 -> "third")</returns>
        </member>
        <member name="T:VDFramework.Extensions.ListExtensions">
            <summary>
            Contains extension methods for <see cref="T:System.Collections.Generic.List`1"/>
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.ListExtensions.ResizeList``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Resize the list so that it holds a <paramref name="newSize"/> amount of <typeparamref name="TItem"/>
            <para></para>(will also resize the underlaying array)
            </summary>
            <param name="list">The list to resize</param>
            <param name="newSize">The elements that are in the list</param>
            <typeparam name="TItem">The type of items in the list</typeparam>
        </member>
        <member name="M:VDFramework.Extensions.ListExtensions.MakeDistinct``1(System.Collections.Generic.List{``0})">
            <summary>
            Removes all duplicate elements from this list by using the default equality comparer to compare values.
            </summary>
            <param name="list">The list whose duplicates will be removed</param>
            <typeparam name="TItem">The type of elements in the list</typeparam>
            <returns>the same list to support chaining methods</returns>
            <seealso cref="M:VDFramework.Extensions.ListExtensions.MakeDistinct``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:VDFramework.Extensions.ListExtensions.MakeDistinct``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Removes all duplicate elements from this list by by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.
            </summary>
            <param name="list">The list whose duplicates will be removed</param>
            <param name="equalityComparer">the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that will be used to compare values</param>
            <typeparam name="TItem">The type of elements in the list</typeparam>
            <returns>the same list to support chaining methods</returns>
        </member>
        <member name="M:VDFramework.Extensions.ListExtensions.AddSorted``1(System.Collections.Generic.List{``0},``0,System.Boolean)">
            <summary>
            Insert the item in a location so that the list remains sorted (insertionSort) <br/>
            The comparisions are made using the <see cref="M:System.IComparable`1.CompareTo(`0)"/> function
            </summary>
            <param name="list">The list to insert the item in</param>
            <param name="itemToAdd">The item to insert into the list</param>
            <param name="addToEndOfEquals">If true, the item will be inserted after all other items that are equal. Otherwise at the beginning</param>
            <typeparam name="TItem">The type of elements in the list</typeparam>
        </member>
        <member name="T:VDFramework.Extensions.ObjectExtensions">
            <summary>
            Contains extension methods for System.<see cref="T:System.Object"/>
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.ObjectExtensions.ConvertTo``1(System.Object)">
            <summary>
            <para>Converts this type to the specified type</para>
            <para>WARNING: this method does not support user-defined conversions</para>
            </summary>
            <typeparam name="TNewType">The Type to convert to</typeparam>
            <exception cref="T:System.InvalidCastException">Will be thrown if the conversion is not valid</exception>
        </member>
        <member name="T:VDFramework.Extensions.RandomElement">
            <summary>
            Extension methods for collections that allow getting a random element or randomly sorting the collection 
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.RandomElement.GetRandomElement``1(System.Collections.Generic.IEnumerable{``0},VDFramework.RandomWrapper.Interface.IRandomNumberGenerator,System.Int32@)">
            <summary>
            Returns a random element from this collection
            </summary>
            <param name="collection">The collection to return a random element from</param>
            <param name="rng">The random number generator to use</param>
            <param name="randomIndex">the index of the element returned</param>
        </member>
        <member name="M:VDFramework.Extensions.RandomElement.GetRandomElement``1(System.Collections.Generic.IEnumerable{``0},VDFramework.RandomWrapper.Interface.IRandomNumberGenerator)">
            <summary>
            Returns a random element from this collection
            </summary>
            <param name="collection">The collection to return a random element from</param>
            <param name="rng">The random number generator to use</param>
        </member>
        <member name="M:VDFramework.Extensions.RandomElement.GetRandomElement``1(System.Collections.Generic.IEnumerable{``0},VDFramework.RandomWrapper.Interface.IRandomNumberGenerator,System.Int32@,System.Int32[])">
            <summary>
            Returns a random element from this collection
            </summary>
            <param name="collection">The collection to return a random element from</param>
            <param name="rng">The random number generator to use</param>
            <param name="randomIndex">the index of the element returned</param>
            <param name="ignoreIndices">[OPTIONAL] the indices of elements that cannot be returned by this function</param>
        </member>
        <member name="M:VDFramework.Extensions.RandomElement.GetRandomElement``1(System.Collections.Generic.IEnumerable{``0},VDFramework.RandomWrapper.Interface.IRandomNumberGenerator,System.Int32[])">
            <summary>
            Returns a random element from this collection
            </summary>
            <param name="collection">The collection to return a random element from</param>
            <param name="rng">The random number generator to use</param>
            <param name="ignoreIndices">[OPTIONAL] the indices of elements that cannot be returned by this function</param>
        </member>
        <member name="M:VDFramework.Extensions.RandomElement.Randomize``1(System.Collections.Generic.IEnumerable{``0},VDFramework.RandomWrapper.Interface.IRandomNumberGenerator)">
            <summary>
            Randomly sorts the IEnumerable
            </summary>
            <returns>The same list, for the purposes of chaining</returns>
        </member>
        <member name="M:VDFramework.Extensions.RandomElement.Randomize``1(System.Collections.Generic.List{``0},VDFramework.RandomWrapper.Interface.IRandomNumberGenerator)">
            <summary>
            Randomly sorts the list
            </summary>
            <returns>The same list, for the purposes of chaining</returns>
        </member>
        <member name="M:VDFramework.Extensions.RandomElement.Randomize``1(System.Collections.Generic.List{``0})">
            <summary>
            Randomly sorts the list
            </summary>
            <returns>The same list, for the purposes of chaining</returns>
        </member>
        <member name="M:VDFramework.Extensions.RandomElement.GetRandomElement``1(System.Collections.Generic.IEnumerable{``0},System.Int32@)">
            <summary>
            Returns a random element from this collection (using <see cref="T:System.Random">System.Random</see>)
            </summary>
            <param name="collection">The collection to return a random element from</param>
            <param name="randomIndex">the index of the element returned</param>
        </member>
        <member name="M:VDFramework.Extensions.RandomElement.GetRandomElement``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a random element from this collection (using <see cref="T:System.Random">System.Random</see>)
            </summary>
            <param name="collection">The collection to return a random element from</param>
        </member>
        <member name="M:VDFramework.Extensions.RandomElement.GetRandomElement``1(System.Collections.Generic.IEnumerable{``0},System.Int32@,System.Int32[])">
            <summary>
            Returns a random element from this collection (using <see cref="T:System.Random">System.Random</see>)
            </summary>
            <param name="collection">The collection to return a random element from</param>
            <param name="randomIndex">the index of the element returned</param>
            <param name="ignoreIndices">[OPTIONAL] the indices of elements that cannot be returned by this function</param>
        </member>
        <member name="M:VDFramework.Extensions.RandomElement.GetRandomElement``1(System.Collections.Generic.IEnumerable{``0},System.Int32[])">
            <summary>
            Returns a random element from this collection (using <see cref="T:System.Random">System.Random</see>)
            </summary>
            <param name="collection">The collection to return a random element from</param>
            <param name="ignoreIndices">[OPTIONAL] the indices of elements that cannot be returned by this function</param>
        </member>
        <member name="M:VDFramework.Extensions.RandomElement.Randomize``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Randomly sorts the IEnumerable (using <see cref="T:System.Random">System.Random</see>)
            </summary>
            <returns>The same list, for the purposes of chaining</returns>
        </member>
        <member name="T:VDFramework.Extensions.StringExtensions">
            <summary>
            Contains extension methods for <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.StringExtensions.InsertSpaceBeforeCapitals(System.String)">
            <summary>
            Returns a new string where a space is inserted before each capital, skipping the first char
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.StringExtensions.ReplaceUnderscoreWithSpace(System.String)">
            <summary>
            Replaces all underscores in this string with a space
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.StringExtensions.CharCount(System.String,System.Char)">
            <summary>
            Get a count of how many times a specific character appears within the string
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.StringExtensions.CharCount(System.String,System.Char,System.Int32)">
            <summary>
            Get a count of how many times a specific character appears within the string up to a given index
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.StringExtensions.CharCount(System.String,System.Char,System.Int32,System.Int32)">
            <summary>
            Get a count of how many times a specific character appears within the string up to a given index
            </summary>
        </member>
        <member name="M:VDFramework.Extensions.StringExtensions.StringCount(System.String,System.String,System.StringComparison)">
            <summary>
            Get a count of how many times a specific string appears within the string
            </summary>
        </member>
        <member name="T:VDFramework.Interfaces.IKeyValuePair`2">
            <summary>
            Represents a Key-value pair with a public getter and setter for the Key and Value
            </summary>
            <typeparam name="TKey">The type of the key</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
        </member>
        <member name="P:VDFramework.Interfaces.IKeyValuePair`2.Key">
            <summary>
            The key of this Key-value pair
            </summary>
        </member>
        <member name="P:VDFramework.Interfaces.IKeyValuePair`2.Value">
            <summary>
            The value of this Key-value pair
            </summary>
        </member>
        <member name="T:VDFramework.IO.Parsers.BinaryParsers.Parsers.BitShiftEndianParser">
            <summary>
            Contains functions to get primitives from or set primitives to a byte*
            </summary>
        </member>
        <member name="T:VDFramework.IO.Parsers.BinaryParsers.Readers.ByteReader">
            <summary>
            Contains functions for parsing and reading bytes
            </summary>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Readers.ByteReader.ReadByte(System.Byte*@)">
            <summary>
            Read a byte from the location of the pointer
            </summary>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Readers.ByteReader.ReadSByte(System.Byte*@)">
            <summary>
            Read a signed byte from the location of the pointer
            </summary>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Readers.ByteReader.ReadBytes(System.Byte*@,System.Byte[]@,System.Int32)">
            <summary>
            Read a specified amount of bytes from the location of the pointer and store them in the given byte[]
            </summary>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Readers.ByteReader.ReadBytes(System.Byte*@,System.Byte[]@,System.UInt64)">
            <summary>
            Read a specified amount of bytes from the location of the pointer and store them in the given byte[]
            </summary>
        </member>
        <member name="T:VDFramework.IO.Parsers.BinaryParsers.Readers.PrimitiveReaders.PrimitiveReaderBigEndian">
            <summary>
            Contains functions for reading bytes in the big endian format (will automatically pick the algorithm depending on the endianness of the system)
            </summary>
        </member>
        <member name="T:VDFramework.IO.Parsers.BinaryParsers.Readers.PrimitiveReaders.PrimitiveReaderLittleEndian">
            <summary>
            Contains functions for reading bytes in the little endian format (will automatically pick the algorithm depending on the endianness of the system)
            </summary>
        </member>
        <member name="T:VDFramework.IO.Parsers.BinaryParsers.Readers.StringReader">
            <summary>
            Contains functions for parsing and reading strings
            </summary>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Readers.StringReader.ReadString(System.Byte*@,System.Int32)">
            <summary>
            Read a NULL-terminated <see cref="P:System.Text.Encoding.UTF8"/> string with maxCount characters from the byte pointer
            </summary>
            <returns>
            A string up to a NULL-character or up to maxCount characters
            </returns>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Readers.StringReader.ReadString(System.Byte*@,System.UInt64)">
            <summary>
            Read a NULL-terminated <see cref="P:System.Text.Encoding.UTF8"/> string with maxCount characters from the byte pointer
            </summary>
            <returns>
            A string up to a NULL-character or up to maxCount characters
            </returns>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Readers.StringReader.ReadString(System.Byte*@)">
            <summary>
            Read a NULL-terminated <see cref="P:System.Text.Encoding.UTF8"/> string with the byte pointer
            </summary>
            <warning>
            There is no predefined limit, it will keep reading until either a NULL-character is found or until it has read Int32.<see cref="F:System.Int32.MaxValue"/> characters
            </warning>
            <returns>
            A string up to a NULL-character
            </returns>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Readers.StringReader.GetString(System.Byte[],System.Int32)">
            <summary>
            Read a NULL-terminated string with maxCount characters from the byte array
            </summary>
            <returns>
            A string up to a NULL-character or up to maxCount characters
            </returns>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Readers.StringReader.GetString(System.Byte[],System.UInt64)">
            <summary>
            Read a NULL-terminated <see cref="P:System.Text.Encoding.UTF8"/> string with maxCount characters from the byte array
            </summary>
            <returns>
            A string up to a NULL-character or up to maxCount characters
            </returns>
        </member>
        <member name="T:VDFramework.IO.Parsers.BinaryParsers.Writers.ByteWriter">
            <summary>
            Contains functions for parsing and writing bytes
            </summary>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Writers.ByteWriter.WriteByte(System.Byte*@,System.Byte)">
            <summary>
            Write a byte to the location of the pointer
            </summary>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Writers.ByteWriter.WriteSByte(System.Byte*@,System.SByte)">
            <summary>
            Write a signed byte to the location of the pointer
            </summary>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Writers.ByteWriter.WriteBytes(System.Byte*@,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write the data given in the array to the location of the pointer, only a specific part of the given array can be used by using the startIndex and length parameters
            </summary>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Writers.ByteWriter.WriteBytes(System.Byte*@,System.Byte[],System.UInt64,System.UInt64)">
            <summary>
            Write the data given in the array to the location of the pointer, only a specific part of the given array can be used by using the startIndex and length parameters
            </summary>
        </member>
        <member name="T:VDFramework.IO.Parsers.BinaryParsers.Writers.PrimitiveWriters.PrimitiveWriterBigEndian">
            <summary>
            Contains functions for writing bytes in the big endian format (will automatically pick the algorithm depending on the endianness of the system)
            </summary>
        </member>
        <member name="T:VDFramework.IO.Parsers.BinaryParsers.Writers.PrimitiveWriters.PrimitiveWriterLittleEndian">
            <summary>
            Contains functions for writing bytes in the little endian format (will automatically pick the algorithm depending on the endianness of the system)
            </summary>
        </member>
        <member name="T:VDFramework.IO.Parsers.BinaryParsers.Writers.StringWriter">
            <summary>
            Contains functions for parsing and writing strings
            </summary>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Writers.StringWriter.WriteString(System.Byte*@,System.String,System.Boolean)">
            <summary>
            <para>Write an <see cref="P:System.Text.Encoding.UTF8"/> string to the byte pointer</para>
            <para>Optionally append a NULL-character at the end of the string</para>
            </summary>
        </member>
        <member name="M:VDFramework.IO.Parsers.BinaryParsers.Writers.StringWriter.WriteString(System.Byte*@,System.String,System.Int32)">
            <summary>
            <para>Write an <see cref="P:System.Text.Encoding.UTF8"/> string to the byte pointer</para>
            <para>The string will be modified so that it is size <paramref name="bytesToWrite"/> either by cutting it off, or appending NULL-characters</para>
            </summary>
            <warning>
            This function does not gracefully handle cutting off a multi-byte character, it will split the bytes of these characters if it reached the <paramref name="bytesToWrite"/>
            </warning>
        </member>
        <member name="T:VDFramework.LootTables.AliasMethod.AliasTable`1">
            <summary>
            Provides an implementation of a Alias table for the purposes of sampling discrete distributions.
            </summary>
            <theory>
            https://research.nvidia.com/labs/rtr/publication/wyman2021alias/
            </theory>
        </member>
        <member name="P:VDFramework.LootTables.AliasMethod.AliasTable`1.TotalWeight">
            <summary>
            The combined weight of every sample in the table.
            </summary>
        </member>
        <member name="P:VDFramework.LootTables.AliasMethod.AliasTable`1.AverageWeight">
            <summary>
            The average weight per sample in the table.
            </summary>
        </member>
        <member name="P:VDFramework.LootTables.AliasMethod.AliasTable`1.IsValid">
            <summary>
            Whether or not the table is empty.
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.AliasMethod.AliasTable`1.#ctor(System.Collections.Generic.IEnumerable{VDFramework.LootTables.Structs.LootTablePair{`0}})">
            <summary>
            A constructor that immediately constructs the alias table using the given collection.
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.AliasMethod.AliasTable`1.#ctor">
            <summary>
            The default constructor that does not immediately construct a table.
            </summary>
            <seealso cref="M:VDFramework.LootTables.AliasMethod.AliasTable`1.Construct(System.Collections.Generic.IEnumerable{VDFramework.LootTables.Structs.LootTablePair{`0}})"/>
        </member>
        <member name="M:VDFramework.LootTables.AliasMethod.AliasTable`1.Construct(System.Collections.Generic.IEnumerable{VDFramework.LootTables.Structs.LootTablePair{`0}})">
            <summary>
            Construct an alias table from the given pairs of {<see cref="T:VDFramework.LootTables.Interfaces.ILoot`1"/>, Weight}
            </summary>
            <param name="sortedCollection">A collection of {<see cref="T:VDFramework.LootTables.Interfaces.ILoot`1"/>, Weight} pairs, sorted by weight</param>
        </member>
        <member name="M:VDFramework.LootTables.AliasMethod.AliasTable`1.Sample(VDFramework.RandomWrapper.Interface.IRandomNumberGenerator)">
            <summary>
            Sample the alias table based on the weights and returns the result.<br/>
            Uses the <paramref name="rng"/> or <see cref="T:VDFramework.RandomWrapper.SystemRandom"/> if that is null
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.AliasMethod.AliasTable`1.Sample">
            <summary>
            Sample the alias table based on the weights and returns the result.<br/>
            Uses <see cref="T:System.Random">System.Random</see>
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.AliasMethod.AliasTable`1.Clear">
            <summary>
            Clears the entire alias table
            </summary>
        </member>
        <member name="T:VDFramework.LootTables.AliasMethod.AliasTableEntry`1">
            <summary>
            An entry of an Alias table
            </summary>
        </member>
        <member name="F:VDFramework.LootTables.AliasMethod.AliasTableEntry`1.Threshold">
            <summary>
            Value in the range of [0, 1) that is used to determine whether to use <see cref="F:VDFramework.LootTables.AliasMethod.AliasTableEntry`1.LowerSample"/> or <see cref="F:VDFramework.LootTables.AliasMethod.AliasTableEntry`1.HigherSample"/>
            </summary>
        </member>
        <member name="T:VDFramework.LootTables.Interfaces.ILoot`1">
            <summary>
            Represents an object that returns loot in some way
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.Interfaces.ILoot`1.GetLoot">
            <summary>
            Retrieves or calculates the loot and returns it
            </summary>
        </member>
        <member name="T:VDFramework.LootTables.Interfaces.IRandomLoot`1">
            <summary>
            Represents an object that returns random loot in some way using a <see cref="T:VDFramework.RandomWrapper.Interface.IRandomNumberGenerator"/>
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.Interfaces.IRandomLoot`1.GetLoot(VDFramework.RandomWrapper.Interface.IRandomNumberGenerator)">
            <summary>
            Retrieves or calculates the loot and returns it
            </summary>
        </member>
        <member name="T:VDFramework.LootTables.LootTableItems.LootTableItem`1">
            <summary>
            The simplest implementation of the <see cref="T:VDFramework.LootTables.Interfaces.ILoot`1"/> interface
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.LootTableItems.LootTableItem`1.#ctor(`0)">
            <summary>
            Creates a new instance of this class with the loot set to <paramref name="loot"/>
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.LootTableItems.LootTableItem`1.GetLoot">
            <inheritdoc/>
        </member>
        <member name="M:VDFramework.LootTables.LootTableItems.LootTableItem`1.Equals(VDFramework.LootTables.LootTableItems.LootTableItem{`0})">
            <inheritdoc/>
        </member>
        <member name="M:VDFramework.LootTables.LootTableItems.LootTableItem`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:VDFramework.LootTables.LootTableItems.LootTableItem`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:VDFramework.LootTables.Structs.LootTablePair`1">
            <summary>
            A simple struct that holds the weight per <see cref="T:VDFramework.LootTables.Interfaces.ILoot`1"/>
            </summary>
        </member>
        <member name="F:VDFramework.LootTables.Structs.LootTablePair`1.Loot">
            <summary>
            The loot that is assigned to this pair
            </summary>
        </member>
        <member name="F:VDFramework.LootTables.Structs.LootTablePair`1.Weight">
            <summary>
            The weight that is associated with the loot of this pair
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.Structs.LootTablePair`1.#ctor(VDFramework.LootTables.Interfaces.ILoot{`0},System.Int64)">
            <summary>
            Create a new instance of this struct with the given loot and weight 
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.Structs.LootTablePair`1.op_Implicit(VDFramework.LootTables.Structs.LootTablePair{`0})~System.Collections.Generic.KeyValuePair{VDFramework.LootTables.Interfaces.ILoot{`0},System.Int64}">
            <summary>
            Convert into a KeyValuePair with Key = Loot and Value = Weight
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.Structs.LootTablePair`1.Equals(VDFramework.LootTables.Structs.LootTablePair{`0})">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.LootTables.Structs.LootTablePair`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.LootTables.Structs.LootTablePair`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.LootTables.Structs.LootTablePair`1.CompareTo(VDFramework.LootTables.Structs.LootTablePair{`0})">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.LootTables.Structs.PercentageLootTablePair`1.Equals(VDFramework.LootTables.Structs.PercentageLootTablePair{`0})">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.LootTables.Structs.PercentageLootTablePair`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.LootTables.Structs.PercentageLootTablePair`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.LootTables.Structs.PercentageLootTablePair`1.CompareTo(VDFramework.LootTables.Structs.PercentageLootTablePair{`0})">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.LootTables.Variations.PercentageLootTable`1.GetLootList">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.LootTables.Variations.PercentageLootTable`1.TryGetLootTablePair(VDFramework.LootTables.Interfaces.ILoot{`0},VDFramework.LootTables.Structs.PercentageLootTablePair{`0}@,System.Int32@)">
            <summary>
            Attempt to get the LootTablePair whose loot matches the given loot
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.Variations.PercentageLootTable`1.EnsureValidPercentages">
            <summary>
            Grab the first N percentages until we reached 100%, or increase the last percentage if the total is below 100%
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.Variations.PercentageLootTable`1.ConvertPercentagesToWeightAndAddToTable(System.Collections.Generic.List{VDFramework.LootTables.Structs.PercentageLootTablePair{`0}})">
            <summary>
            Convert percentages to weight and add them to the lootTable
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.Variations.PercentageLootTable`1.PercentageFloatToDecimal(System.Single)">
            <summary>
            Converts a float percentage (0% - 100%) to a decimal percentage factor (0 - 1)
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.Variations.PercentageLootTable`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.LootTables.WeightedLootTable`1">
            <summary>
            A weighted loot table that allows you to grab an random element of type <typeparamref name="TLootType"/> with a probability based on the weight assigned to it.<br/>
            Internally the Alias-method is used for the sampling.
            </summary>
            <seealso cref="T:VDFramework.LootTables.AliasMethod.AliasTable`1"/>
        </member>
        <member name="P:VDFramework.LootTables.WeightedLootTable`1.TotalWeight">
            <summary>
            The combined weight of every loot in the table
            </summary>
        </member>
        <member name="P:VDFramework.LootTables.WeightedLootTable`1.ShouldReconstructAliasTable">
            <summary>
            Whether or not the internal alias table should be reconstructed first when <see cref="M:VDFramework.LootTables.WeightedLootTable`1.GetAliasTable"/> is called
            </summary>
        </member>
        <member name="P:VDFramework.LootTables.WeightedLootTable`1.RandomNumberGenerator">
            <summary>
            The <see cref="T:VDFramework.RandomWrapper.Interface.IRandomNumberGenerator"/> implementation that should be used when getting a random value from the loot table.<br/>
            Will default to <see cref="T:VDFramework.RandomWrapper.SystemRandom"/> if not set.
            </summary>
        </member>
        <member name="F:VDFramework.LootTables.WeightedLootTable`1.lootTable">
            <summary>
            The list of pairs that represents this loot table.<br/>
            Similar to Dictionary{ILoot{TLootType}, int}
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.WeightedLootTable`1.#ctor">
            <summary>
            Creates a new instance of a weighted loot table with no loot
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.WeightedLootTable`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,System.Int64}})">
            <summary>
            Creates a new instance of a weighted loot table with the given loot
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.WeightedLootTable`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{VDFramework.LootTables.Interfaces.ILoot{`0},System.Int64}})">
            <summary>
            Creates a new instance of a weighted loot table with the given loot
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.WeightedLootTable`1.GetLootList">
            <summary>
            Returns a copy of the loot table as a list.
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.WeightedLootTable`1.GetLoot">
            <summary>
            Grabs a random ILoot from the table based on the weights and returns it.<br/>
            Uses the <see cref="P:VDFramework.LootTables.WeightedLootTable`1.RandomNumberGenerator"/> or <see cref="T:VDFramework.RandomWrapper.SystemRandom"/> if that is null
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.WeightedLootTable`1.GetLoot(VDFramework.RandomWrapper.Interface.IRandomNumberGenerator)">
            <summary>
            Grabs a random ILoot from the table based on the weights and returns it.<br/>
            Uses the <see cref="P:VDFramework.LootTables.WeightedLootTable`1.RandomNumberGenerator"/> or <see cref="T:VDFramework.RandomWrapper.SystemRandom"/> if that is null.<br/>
            Will use the provided <see cref="T:VDFramework.RandomWrapper.Interface.IRandomNumberGenerator"/> for any nested <see cref="T:VDFramework.LootTables.Interfaces.IRandomLoot`1"/> as well.
            </summary>
            <param name="rng">The random number generator to use</param>
        </member>
        <member name="M:VDFramework.LootTables.WeightedLootTable`1.GetLoot(VDFramework.RandomWrapper.Interface.IRandomNumberGenerator,System.Boolean)">
            <summary>
            Grabs a random ILoot from the table based on the weights and returns it.<br/>
            Uses the <see cref="P:VDFramework.LootTables.WeightedLootTable`1.RandomNumberGenerator"/> or <see cref="T:VDFramework.RandomWrapper.SystemRandom"/> if that is null.<br/>
            Will use the provided <see cref="T:VDFramework.RandomWrapper.Interface.IRandomNumberGenerator"/> for any nested <see cref="T:VDFramework.LootTables.Interfaces.IRandomLoot`1"/> if <paramref name="useRNGForNested"/> is TRUE.
            </summary>
            <param name="rng">The random number generator to use</param>
            <param name="useRNGForNested">Whether </param>
        </member>
        <member name="M:VDFramework.LootTables.WeightedLootTable`1.GetAliasTable">
            <summary>
            Returns the internal alias table of this loot table<br/>
            The table will be constructed if <see cref="P:VDFramework.LootTables.WeightedLootTable`1.ShouldReconstructAliasTable"/> is true
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.WeightedLootTable`1.ConstructAliasTable">
            <summary>
            Calculate an array of indices from the Loot Table <br/>
            </summary>
        </member>
        <member name="M:VDFramework.LootTables.WeightedLootTable`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:VDFramework.LootTables.WeightedLootTable`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:VDFramework.ObserverPattern.Constants.Priority">
            <summary>
            A helper class that provides constants for priorities (can be used in for example the <see cref="T:VDFramework.EventSystem.EventManager"/> and <see cref="T:VDFramework.ObserverPattern.PrioritisedAction"/>
            </summary>
        </member>
        <member name="F:VDFramework.ObserverPattern.Constants.Priority.HIGHEST">
            <summary>
            The highest possible priority, should always be first
            </summary>
        </member>
        <member name="F:VDFramework.ObserverPattern.Constants.Priority.HIGH">
            <summary>
            A higher than default priority
            </summary>
        </member>
        <member name="F:VDFramework.ObserverPattern.Constants.Priority.DEFAULT">
            <summary>
            The default priority
            </summary>
        </member>
        <member name="F:VDFramework.ObserverPattern.Constants.Priority.LOW">
            <summary>
            A lower than default priority
            </summary>
        </member>
        <member name="F:VDFramework.ObserverPattern.Constants.Priority.UI">
            <summary>
            The priority for UI based systems (low so it can use changes from other systems)
            </summary>
        </member>
        <member name="F:VDFramework.ObserverPattern.Constants.Priority.LOWEST">
            <summary>
            The lowest possible priority, should always be last
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.CallbackHandler">
            <summary>
            A wrapper class for a callback with priority
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedAction">
            <summary>
            A class that mimics System.Action but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction.AddCallback(System.Action,System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction.RemoveCallback(System.Action)">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction.Invoke">
            <summary>
            Invoke the callbacks according to their priority
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedAction`1">
            <summary>
            A class that mimics System.Action but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`1.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`1.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`1.AddCallback(System.Action{`0},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`1.RemoveCallback(System.Action{`0})">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`1.AddCallback(System.Action,System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`1.RemoveCallback(System.Action)">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`1.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`1.Invoke(`0)">
            <summary>
            Invoke the callbacks according to their priority
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedAction`2">
            <summary>
            A class that mimics System.Action but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`2.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`2.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`2.AddCallback(System.Action{`0,`1},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`2.RemoveCallback(System.Action{`0,`1})">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`2.AddCallback(System.Action,System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`2.RemoveCallback(System.Action)">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`2.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`2.Invoke(`0,`1)">
            <summary>
            Invoke the callbacks according to their priority
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedAction`3">
            <summary>
            A class that mimics System.Action but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`3.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`3.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`3.AddCallback(System.Action{`0,`1,`2},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`3.RemoveCallback(System.Action{`0,`1,`2})">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`3.AddCallback(System.Action,System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`3.RemoveCallback(System.Action)">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`3.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`3.Invoke(`0,`1,`2)">
            <summary>
            Invoke the callbacks according to their priority
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedAction`4">
            <summary>
            A class that mimics System.Action but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`4.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`4.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`4.AddCallback(System.Action{`0,`1,`2,`3},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`4.RemoveCallback(System.Action{`0,`1,`2,`3})">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`4.AddCallback(System.Action,System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`4.RemoveCallback(System.Action)">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`4.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`4.Invoke(`0,`1,`2,`3)">
            <summary>
            Invoke the callbacks according to their priority
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedAction`5">
            <summary>
            A class that mimics System.Action but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`5.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`5.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`5.AddCallback(System.Action{`0,`1,`2,`3,`4},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`5.RemoveCallback(System.Action{`0,`1,`2,`3,`4})">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`5.AddCallback(System.Action,System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`5.RemoveCallback(System.Action)">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`5.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`5.Invoke(`0,`1,`2,`3,`4)">
            <summary>
            Invoke the callbacks according to their priority
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedAction`6">
            <summary>
            A class that mimics System.Action but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`6.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`6.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`6.AddCallback(System.Action{`0,`1,`2,`3,`4,`5},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`6.RemoveCallback(System.Action{`0,`1,`2,`3,`4,`5})">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`6.AddCallback(System.Action,System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`6.RemoveCallback(System.Action)">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`6.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`6.Invoke(`0,`1,`2,`3,`4,`5)">
            <summary>
            Invoke the callbacks according to their priority
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedAction`7">
            <summary>
            A class that mimics System.Action but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`7.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`7.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`7.AddCallback(System.Action{`0,`1,`2,`3,`4,`5,`6},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`7.RemoveCallback(System.Action{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`7.AddCallback(System.Action,System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`7.RemoveCallback(System.Action)">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`7.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`7.Invoke(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Invoke the callbacks according to their priority
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedAction`8">
            <summary>
            A class that mimics System.Action but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`8.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`8.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`8.AddCallback(System.Action{`0,`1,`2,`3,`4,`5,`6,`7},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`8.RemoveCallback(System.Action{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`8.AddCallback(System.Action,System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`8.RemoveCallback(System.Action)">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`8.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`8.Invoke(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Invoke the callbacks according to their priority
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedAction`9">
            <summary>
            A class that mimics System.Action but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`9.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`9.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`9.AddCallback(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`9.RemoveCallback(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8})">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`9.AddCallback(System.Action,System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`9.RemoveCallback(System.Action)">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`9.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`9.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Invoke the callbacks according to their priority
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedAction`10">
            <summary>
            A class that mimics System.Action but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`10.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`10.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`10.AddCallback(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`10.RemoveCallback(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9})">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`10.AddCallback(System.Action,System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`10.RemoveCallback(System.Action)">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`10.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`10.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            Invoke the callbacks according to their priority
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedAction`11">
            <summary>
            A class that mimics System.Action but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`11.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`11.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`11.AddCallback(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`11.RemoveCallback(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10})">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`11.AddCallback(System.Action,System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`11.RemoveCallback(System.Action)">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`11.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`11.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
            <summary>
            Invoke the callbacks according to their priority
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedAction`12">
            <summary>
            A class that mimics System.Action but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`12.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`12.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`12.AddCallback(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`12.RemoveCallback(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11})">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`12.AddCallback(System.Action,System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`12.RemoveCallback(System.Action)">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`12.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`12.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)">
            <summary>
            Invoke the callbacks according to their priority
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedAction`13">
            <summary>
            A class that mimics System.Action but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`13.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`13.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`13.AddCallback(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`13.RemoveCallback(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12})">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`13.AddCallback(System.Action,System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`13.RemoveCallback(System.Action)">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`13.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`13.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)">
            <summary>
            Invoke the callbacks according to their priority
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedAction`14">
            <summary>
            A class that mimics System.Action but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`14.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`14.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`14.AddCallback(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`14.RemoveCallback(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13})">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`14.AddCallback(System.Action,System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`14.RemoveCallback(System.Action)">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`14.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`14.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)">
            <summary>
            Invoke the callbacks according to their priority
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedAction`15">
            <summary>
            A class that mimics System.Action but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`15.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`15.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`15.AddCallback(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`15.RemoveCallback(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14})">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`15.AddCallback(System.Action,System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`15.RemoveCallback(System.Action)">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`15.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`15.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)">
            <summary>
            Invoke the callbacks according to their priority
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedAction`16">
            <summary>
            A class that mimics System.Action but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`16.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedAction`16.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`16.AddCallback(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`16.RemoveCallback(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15})">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`16.AddCallback(System.Action,System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`16.RemoveCallback(System.Action)">
            <summary>
            Remove a callback from this delegate
            </summary>
            <param name="callback">The callback to remove</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`16.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedAction`16.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15)">
            <summary>
            Invoke the callbacks according to their priority
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedFunc`1">
            <summary>
            A class that mimics System.Func but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`1.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`1.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`1.AddCallback(System.Func{`0},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`1.RemoveCallback(System.Func{`0})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`1.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`1.Invoke">
            <summary>
            Invoke the callbacks according to their priority <br/>
            Only the last result will be returned
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedFunc`2">
            <summary>
            A class that mimics System.Func but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`2.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`2.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`2.AddCallback(System.Func{`0,`1},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`2.RemoveCallback(System.Func{`0,`1})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`2.AddCallback(System.Func{`1},System.Int32)">
            <summary>
            Add a new callback without parameters to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`2.RemoveCallback(System.Func{`1})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`2.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`2.Invoke(`0)">
            <summary>
            Invoke the callbacks according to their priority <br/>
            Only the last result will be returned
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedFunc`3">
            <summary>
            A class that mimics System.Func but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`3.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`3.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`3.AddCallback(System.Func{`0,`1,`2},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`3.RemoveCallback(System.Func{`0,`1,`2})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`3.AddCallback(System.Func{`2},System.Int32)">
            <summary>
            Add a new callback without parameters to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`3.RemoveCallback(System.Func{`2})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`3.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`3.Invoke(`0,`1)">
            <summary>
            Invoke the callbacks according to their priority <br/>
            Only the last result will be returned
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedFunc`4">
            <summary>
            A class that mimics System.Func but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`4.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`4.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`4.AddCallback(System.Func{`0,`1,`2,`3},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`4.RemoveCallback(System.Func{`0,`1,`2,`3})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`4.AddCallback(System.Func{`3},System.Int32)">
            <summary>
            Add a new callback without parameters to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`4.RemoveCallback(System.Func{`3})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`4.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`4.Invoke(`0,`1,`2)">
            <summary>
            Invoke the callbacks according to their priority <br/>
            Only the last result will be returned
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedFunc`5">
            <summary>
            A class that mimics System.Func but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`5.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`5.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`5.AddCallback(System.Func{`0,`1,`2,`3,`4},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`5.RemoveCallback(System.Func{`0,`1,`2,`3,`4})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`5.AddCallback(System.Func{`4},System.Int32)">
            <summary>
            Add a new callback without parameters to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`5.RemoveCallback(System.Func{`4})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`5.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`5.Invoke(`0,`1,`2,`3)">
            <summary>
            Invoke the callbacks according to their priority <br/>
            Only the last result will be returned
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedFunc`6">
            <summary>
            A class that mimics System.Func but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`6.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`6.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`6.AddCallback(System.Func{`0,`1,`2,`3,`4,`5},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`6.RemoveCallback(System.Func{`0,`1,`2,`3,`4,`5})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`6.AddCallback(System.Func{`5},System.Int32)">
            <summary>
            Add a new callback without parameters to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`6.RemoveCallback(System.Func{`5})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`6.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`6.Invoke(`0,`1,`2,`3,`4)">
            <summary>
            Invoke the callbacks according to their priority <br/>
            Only the last result will be returned
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedFunc`7">
            <summary>
            A class that mimics System.Func but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`7.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`7.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`7.AddCallback(System.Func{`0,`1,`2,`3,`4,`5,`6},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`7.RemoveCallback(System.Func{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`7.AddCallback(System.Func{`6},System.Int32)">
            <summary>
            Add a new callback without parameters to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`7.RemoveCallback(System.Func{`6})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`7.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`7.Invoke(`0,`1,`2,`3,`4,`5)">
            <summary>
            Invoke the callbacks according to their priority <br/>
            Only the last result will be returned
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedFunc`8">
            <summary>
            A class that mimics System.Func but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`8.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`8.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`8.AddCallback(System.Func{`0,`1,`2,`3,`4,`5,`6,`7},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`8.RemoveCallback(System.Func{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`8.AddCallback(System.Func{`7},System.Int32)">
            <summary>
            Add a new callback without parameters to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`8.RemoveCallback(System.Func{`7})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`8.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`8.Invoke(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Invoke the callbacks according to their priority <br/>
            Only the last result will be returned
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedFunc`9">
            <summary>
            A class that mimics System.Func but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`9.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`9.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`9.AddCallback(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`9.RemoveCallback(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`9.AddCallback(System.Func{`8},System.Int32)">
            <summary>
            Add a new callback without parameters to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`9.RemoveCallback(System.Func{`8})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`9.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`9.Invoke(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Invoke the callbacks according to their priority <br/>
            Only the last result will be returned
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedFunc`10">
            <summary>
            A class that mimics System.Func but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`10.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`10.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`10.AddCallback(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`10.RemoveCallback(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`10.AddCallback(System.Func{`9},System.Int32)">
            <summary>
            Add a new callback without parameters to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`10.RemoveCallback(System.Func{`9})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`10.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`10.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Invoke the callbacks according to their priority <br/>
            Only the last result will be returned
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedFunc`11">
            <summary>
            A class that mimics System.Func but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`11.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`11.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`11.AddCallback(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`11.RemoveCallback(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`11.AddCallback(System.Func{`10},System.Int32)">
            <summary>
            Add a new callback without parameters to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`11.RemoveCallback(System.Func{`10})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`11.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`11.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            Invoke the callbacks according to their priority <br/>
            Only the last result will be returned
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedFunc`12">
            <summary>
            A class that mimics System.Func but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`12.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`12.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`12.AddCallback(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`12.RemoveCallback(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`12.AddCallback(System.Func{`11},System.Int32)">
            <summary>
            Add a new callback without parameters to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`12.RemoveCallback(System.Func{`11})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`12.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`12.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
            <summary>
            Invoke the callbacks according to their priority <br/>
            Only the last result will be returned
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedFunc`13">
            <summary>
            A class that mimics System.Func but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`13.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`13.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`13.AddCallback(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`13.RemoveCallback(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`13.AddCallback(System.Func{`12},System.Int32)">
            <summary>
            Add a new callback without parameters to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`13.RemoveCallback(System.Func{`12})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`13.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`13.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)">
            <summary>
            Invoke the callbacks according to their priority <br/>
            Only the last result will be returned
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedFunc`14">
            <summary>
            A class that mimics System.Func but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`14.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`14.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`14.AddCallback(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`14.RemoveCallback(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`14.AddCallback(System.Func{`13},System.Int32)">
            <summary>
            Add a new callback without parameters to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`14.RemoveCallback(System.Func{`13})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`14.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`14.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)">
            <summary>
            Invoke the callbacks according to their priority <br/>
            Only the last result will be returned
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedFunc`15">
            <summary>
            A class that mimics System.Func but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`15.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`15.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`15.AddCallback(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`15.RemoveCallback(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`15.AddCallback(System.Func{`14},System.Int32)">
            <summary>
            Add a new callback without parameters to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`15.RemoveCallback(System.Func{`14})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`15.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`15.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)">
            <summary>
            Invoke the callbacks according to their priority <br/>
            Only the last result will be returned
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedFunc`16">
            <summary>
            A class that mimics System.Func but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`16.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`16.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`16.AddCallback(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`16.RemoveCallback(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`16.AddCallback(System.Func{`15},System.Int32)">
            <summary>
            Add a new callback without parameters to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`16.RemoveCallback(System.Func{`15})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`16.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`16.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)">
            <summary>
            Invoke the callbacks according to their priority <br/>
            Only the last result will be returned
            </summary>
        </member>
        <member name="T:VDFramework.ObserverPattern.PrioritisedFunc`17">
            <summary>
            A class that mimics System.Func but allows giving a priority to the callbacks
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`17.Callbacks">
            <summary>
            The callbacks associated with this delegate
            </summary>
        </member>
        <member name="E:VDFramework.ObserverPattern.PrioritisedFunc`17.ParameterlessCallbacks">
            <summary>
            The callbacks associated with this delegate that have no parameters
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`17.AddCallback(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16},System.Int32)">
            <summary>
            Add a new callback to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`17.RemoveCallback(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`17.AddCallback(System.Func{`16},System.Int32)">
            <summary>
            Add a new callback without parameters to this delegate
            </summary>
            <param name="callback">The callback to add</param>
            <param name="priority">The priority of this callback, higher priority will be invoked before lower</param>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`17.RemoveCallback(System.Func{`16})">
            <summary>
            Remove a callback from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`17.ClearCallbacks">
            <summary>
             Removes all the callbacks from this delegate
            </summary>
        </member>
        <member name="M:VDFramework.ObserverPattern.PrioritisedFunc`17.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15)">
            <summary>
            Invoke the callbacks according to their priority <br/>
            Only the last result will be returned
            </summary>
        </member>
        <member name="T:SeedFinder.Curve.Utility.CubicHermiteCalculator">
            <summary>
            Provides the under-the-hood calculations needed for a Cubic Hermite curve.<br/>
            This is a Cubic curve that where the 2 control points are defined by a weight and a tangent from the start and end points
            </summary>
            <wikipedia>https://en.wikipedia.org/wiki/Cubic_Hermite_spline</wikipedia>
            <plottedExample>https://www.desmos.com/calculator/hrswjq9qbe</plottedExample>
        </member>
        <member name="F:SeedFinder.Curve.Utility.CubicHermiteCalculator.Xi">
            <summary>
            A mathematical constant used for getting the roots of a cubic equation.<br/>
            (-1 + √-3) / 2<br/>
            Symbol: ξ
            </summary>
            <wikipedia>https://en.wikipedia.org/wiki/Cubic_equation#General_cubic_formula</wikipedia>
        </member>
        <member name="M:SeedFinder.Curve.Utility.CubicHermiteCalculator.CalculateControlPoints(SeedFinder.Curve.Structs.KeyFrame,SeedFinder.Curve.Structs.KeyFrame,SeedFinder.Curve.Structs.Point@,SeedFinder.Curve.Structs.Point@)">
            <summary>
            Calculates the right control point for the start keyframe and the left control point for the end keyframe and returns them as out parameters
            </summary>
        </member>
        <member name="M:SeedFinder.Curve.Utility.CubicHermiteCalculator.CalculateControlPoint1(SeedFinder.Curve.Structs.KeyFrame,SeedFinder.Curve.Structs.KeyFrame)">
            <summary>
            Calculates the control point to the right of the start keyframe
            </summary>
        </member>
        <member name="M:SeedFinder.Curve.Utility.CubicHermiteCalculator.CalculateControlPoint2(SeedFinder.Curve.Structs.KeyFrame,SeedFinder.Curve.Structs.KeyFrame)">
            <summary>
            Calculates the control point to the left of the end keyframe
            </summary>
        </member>
        <member name="M:SeedFinder.Curve.Utility.CubicHermiteCalculator.EvaluateCurve(System.Double,SeedFinder.Curve.Structs.Point,SeedFinder.Curve.Structs.Point,SeedFinder.Curve.Structs.Point,SeedFinder.Curve.Structs.Point)">
            <summary>
            Evaluate the Cubic Hermite curve that is defined by the start and end points and 2 control points 
            </summary>
            <returns>the y value of the evaluated x coordinate on the curve</returns>
        </member>
        <member name="M:SeedFinder.Curve.Utility.CubicHermiteCalculator.GetPointOnCurve(System.Double,SeedFinder.Curve.Structs.Point,SeedFinder.Curve.Structs.Point,SeedFinder.Curve.Structs.Point,SeedFinder.Curve.Structs.Point)">
            <summary>
            Gives a point on the curve depending on the value of t. With t = 0 being the start and t = 1 being the end.<br/>
            </summary>
            <warning>While this does allow one to trace the curve easily, t does not equate to a % along the curve and should not be used for constant steps</warning>
        </member>
        <member name="M:SeedFinder.Curve.Utility.CubicHermiteCalculator.Delta(System.Double,SeedFinder.Curve.Structs.Point)">
            <summary>
            Returns the difference towards the start coordinate
            </summary>
        </member>
        <member name="M:SeedFinder.Curve.Utility.CubicHermiteCalculator.RootPlus(System.Double,SeedFinder.Curve.Structs.Point,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Calculates a root of the polynomial equation using the complex number from <see cref="M:SeedFinder.Curve.Utility.CubicHermiteCalculator.ComplexPlus(System.Double,SeedFinder.Curve.Structs.Point,System.Double,System.Double,System.Double,System.Double)"/> and ensures the result is real.
            </summary>
        </member>
        <member name="M:SeedFinder.Curve.Utility.CubicHermiteCalculator.RootMinus(System.Double,SeedFinder.Curve.Structs.Point,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Calculates a root of the polynomial equation using the complex number from <see cref="M:SeedFinder.Curve.Utility.CubicHermiteCalculator.ComplexMinus(System.Double,SeedFinder.Curve.Structs.Point,System.Double,System.Double,System.Double,System.Double)"/> and ensures the result is real.
            </summary>
        </member>
        <member name="T:SeedFinder.Curve.CubicHermiteCurve">
            <summary>
            The implementation of a Cubic Hermite curve.<br/>
            This is a Cubic curve that where the 2 control points are defined by a weight and a tangent from the start and end points.<br/>
            The behaviour of this curve is identical to Unitys AnimationCurve
            </summary>
            <wikipedia>https://en.wikipedia.org/wiki/Cubic_Hermite_spline</wikipedia>
            <plottedExample>https://www.desmos.com/calculator/hrswjq9qbe</plottedExample>
        </member>
        <member name="P:SeedFinder.Curve.CubicHermiteCurve.PreWrapMode">
            <summary>
            How evaluating a point that falls to the left of the curve should be handled
            </summary>
        </member>
        <member name="P:SeedFinder.Curve.CubicHermiteCurve.PostWrapMode">
            <summary>
            How evaluating a point that falls to the right of the curve should be handled
            </summary>
        </member>
        <member name="P:SeedFinder.Curve.CubicHermiteCurve.KeyFrames">
            <summary>
            All the keyframes that belong to this curve, sorted by their x coordinates.
            </summary>
        </member>
        <member name="P:SeedFinder.Curve.CubicHermiteCurve.StartPoint">
            <summary>
            The first keyframe of this curve
            </summary>
        </member>
        <member name="P:SeedFinder.Curve.CubicHermiteCurve.EndPoint">
            <summary>
            The last keyframe of this curve
            </summary>
        </member>
        <member name="M:SeedFinder.Curve.CubicHermiteCurve.#ctor">
            <summary>
            Creates a new Cubic Hermite curve with no keyframes
            </summary>
        </member>
        <member name="M:SeedFinder.Curve.CubicHermiteCurve.#ctor(SeedFinder.Curve.Structs.KeyFrame[])">
            <summary>
            Creates a new Cubic Hermite curve with the given keyframes
            </summary>
        </member>
        <member name="M:SeedFinder.Curve.CubicHermiteCurve.#ctor(System.Collections.Generic.IEnumerable{SeedFinder.Curve.Structs.KeyFrame})">
            <summary>
            Creates a new Cubic Hermite curve with the given keyframes
            </summary>
        </member>
        <member name="M:SeedFinder.Curve.CubicHermiteCurve.Evaluate(System.Double)">
            <summary>
            Evaluate the curve at the given x coordinate
            </summary>
            <param name="x">The X coordnate to evaluate</param>
            <returns>The Y coordinate of the point on the curve that has the given X coordinate</returns>
        </member>
        <member name="M:SeedFinder.Curve.CubicHermiteCurve.Evaluate(System.Double,SeedFinder.Curve.Enums.CurveWrapMode,SeedFinder.Curve.Enums.CurveWrapMode)">
            <summary>
            Evaluate the curve at the given x coordinate
            </summary>
            <param name="x">The X coordnate to evaluate</param>
            <param name="preWrapMode">How to handle a point that falls outside the curve, before the first keyframe</param>
            <param name="postWrapMode">How to handle a point that falls outside the curve, after the last keyframe</param>
            <returns>The Y coordinate of the point on the curve that has the given X coordinate</returns>
        </member>
        <member name="M:SeedFinder.Curve.CubicHermiteCurve.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:SeedFinder.Curve.Enums.CurveWrapMode">
            <summary>
            How to handle evaluating a point outside of the defined curve
            </summary>
        </member>
        <member name="F:SeedFinder.Curve.Enums.CurveWrapMode.Loop">
            <summary>
            Repeat the curve ad ininitum
            </summary>
        </member>
        <member name="F:SeedFinder.Curve.Enums.CurveWrapMode.PingPong">
            <summary>
            Repeat the curve ad infinitum, but reverse the curve every other cycle
            </summary>
        </member>
        <member name="F:SeedFinder.Curve.Enums.CurveWrapMode.Clamp">
            <summary>
            Return the value at the start/end point
            </summary>
        </member>
        <member name="T:SeedFinder.Curve.Structs.KeyFrame">
            <summary>
            Represents a x and y coordinate on the curve.<br/>
            Also contains a weight and a tangent for a cubic hermite curve
            </summary>
            <seealso cref="P:SeedFinder.Curve.Structs.KeyFrame.InTangent"/>
            <seealso cref="P:SeedFinder.Curve.Structs.KeyFrame.OutTangent"/>
        </member>
        <member name="M:SeedFinder.Curve.Structs.KeyFrame.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new keyframe with the given coordinates, and optionally the weights and tangents
            </summary>
        </member>
        <member name="M:SeedFinder.Curve.Structs.KeyFrame.#ctor(SeedFinder.Curve.Structs.Point,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new keyframe with the coordinates from the given points, and optionally the weights and tangents
            </summary>
        </member>
        <member name="P:SeedFinder.Curve.Structs.KeyFrame.x">
            <summary>
            The X coordinate (Time) of this keyframe
            </summary>
        </member>
        <member name="P:SeedFinder.Curve.Structs.KeyFrame.y">
            <summary>
            The Y coordinate (Value) of this keyframe
            </summary>
        </member>
        <member name="P:SeedFinder.Curve.Structs.KeyFrame.Position">
            <summary>
            The position of this keyframe
            </summary>
        </member>
        <member name="P:SeedFinder.Curve.Structs.KeyFrame.UseWeightForLeftControlPoint">
            <summary>
            Whether or not the weight should be used when calculating the left control point of this keyframe
            </summary>
        </member>
        <member name="P:SeedFinder.Curve.Structs.KeyFrame.UseWeightForRightControlPoint">
            <summary>
            Whether or not the weight should be used when calculating the right control point of this keyframe
            </summary>
        </member>
        <member name="P:SeedFinder.Curve.Structs.KeyFrame.InTangent">
            <summary>
            The tangent on the left side of this keyframe.<br/><br/>
            Use Infinity if you want to use a constant for this curve:<br/>
            <see cref="F:System.Double.PositiveInfinity"/> = start value (other keyframe)<br/>
            <see cref="F:System.Double.NegativeInfinity"/> = end value (this keyframe)
            </summary>
        </member>
        <member name="P:SeedFinder.Curve.Structs.KeyFrame.InWeight">
            <summary>
            The weight used to calculate the control point on the left of this keyframe.<br/>
            It is represented by a normalized value [0, 1] between this keyframe and the one before it
            </summary>
        </member>
        <member name="P:SeedFinder.Curve.Structs.KeyFrame.OutTangent">
            <summary>
            The tangent on the right side of this keyframe.<br/><br/>
            Use Infinity if you want to use a constant for this curve:<br/>
            <see cref="F:System.Double.PositiveInfinity"/> = start value (this keyframe)<br/>
            <see cref="F:System.Double.NegativeInfinity"/> = end value (other keyframe)
            </summary>
        </member>
        <member name="P:SeedFinder.Curve.Structs.KeyFrame.OutWeight">
            <summary>
            The weight used to calculate the control point on the right of this keyframe.<br/>
            It is represented by a normalized value [0, 1] between this keyframe and the one after it
            </summary>
        </member>
        <member name="P:SeedFinder.Curve.Structs.KeyFrame.LeftControlPoint">
            <summary>
            The control point to the left of this keyframe
            </summary>
        </member>
        <member name="P:SeedFinder.Curve.Structs.KeyFrame.RightControlPoint">
            <summary>
            The control point to the right of this keyframe
            </summary>
        </member>
        <member name="P:SeedFinder.Curve.Structs.KeyFrame.HasCalculatedLeftControlPoint">
            <summary>
            Whether or not the left control point has been calculated with the latest data set
            </summary>
        </member>
        <member name="P:SeedFinder.Curve.Structs.KeyFrame.HasCalculatedRightControlPoint">
            <summary>
            Whether or not the right control point has been calculated with the latest data set
            </summary>
        </member>
        <member name="M:SeedFinder.Curve.Structs.KeyFrame.CompareTo(SeedFinder.Curve.Structs.KeyFrame)">
            <inheritdoc />
        </member>
        <member name="M:SeedFinder.Curve.Structs.KeyFrame.CalculateLeftControlPoint(SeedFinder.Curve.Structs.KeyFrame)">
            <summary>
            Calculate the left control point of this keyframe
            </summary>
            <param name="startPoint">A keyframe to the left of this keyframe that will serve as the begin point of the cubic hermite curve</param>
        </member>
        <member name="M:SeedFinder.Curve.Structs.KeyFrame.CalculateRightControlPoint(SeedFinder.Curve.Structs.KeyFrame)">
            <summary>
            Calculate the right control point of this keyframe
            </summary>
            <param name="endPoint">A keyframe to the right of this keyframe that will serve as the end point of the cubic hermite curve</param>
        </member>
        <member name="T:SeedFinder.Curve.Structs.Point">
            <summary>
            Represents an ordered pair of integer x- and y-coordinates that defines a point in a two-dimensional plane.
            </summary>
        </member>
        <member name="F:SeedFinder.Curve.Structs.Point.x">
            <summary>
            The x coordinate of this point
            </summary>
        </member>
        <member name="F:SeedFinder.Curve.Structs.Point.y">
            <summary>
            The y coordinate of this point
            </summary>
        </member>
        <member name="M:SeedFinder.Curve.Structs.Point.#ctor(System.Double,System.Double)">
            <summary>
            Create a new point with the given x and y coordinates
            </summary>
        </member>
        <member name="M:SeedFinder.Curve.Structs.Point.#ctor(SeedFinder.Curve.Structs.Point)">
            <summary>
            Create a new point with the same coordinates as the given point
            </summary>
        </member>
    </members>
</doc>
